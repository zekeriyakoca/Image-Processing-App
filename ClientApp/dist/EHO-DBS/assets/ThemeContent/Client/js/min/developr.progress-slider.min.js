(function (e, t, n) { function s(e, t, r, i, s, o, u, a) { var f, l; if (typeof e === "string") { e = parseFloat(e, 10) } if (typeof e === "number" && e > 0) { l = e; e = []; if (o) { for (f = i; f <= s; f += l) { e.push(f) } } else { for (f = i + l; f < s; f += l) { e.push(f) } } } if (typeof e !== "object") { return [] } for (f = 0; f < e.length; ++f) { if (typeof e[f] !== "object") { e[f] = { value: e[f] } } if (e[f].label == n) { e[f].label = t ? t === true ? e[f].value : t.replace("[value]", e[f].value) : "" } if (e[f].align == n) { if (u && e[f].value === i) { e[f].align = a ? "right" : "bottom" } else if (u && e[f].value === s) { e[f].align = a ? "left" : "top" } else { e[f].align = r } } } return e } function o(e, t) { if (e === null) { e = t } if (typeof e !== "number" && typeof e !== "boolean") { e = parseInt(e, 10); if (isNaN(e)) { e = 0 } } return e } function u(e) { var t, n; if (e) { if (e.inputs) { e.inputs = l(e.inputs, true) } if (e.input) { e.input = l(e.input, false) } if (e.values) { if (typeof e.values !== "object" || e.values.length < 2) { e.values = null } } if (e.tooltip && typeof e.tooltip === "object") { if (e.tooltip.length === 1) { e.tooltip = [e.tooltip[0], e.tooltip[0]] } else if (e.tooltip.length === 0) { e.tooltip = null } } } return e } function a(t, n, r) { var i = e(this), s; i.on("keydown.slider", function (e) { if (e.which === 38 || e.which === 40) { var s = parseFloat(n(i.val())); if (!isNaN(s)) { s += e.shiftKey ? e.which === 38 ? 10 : -10 : e.which === 38 ? 1 : -1; if (t.round > 0) { s = Math.round(s * Math.pow(10, t.round)) / Math.pow(10, t.round) } s = Math.max(t.min, Math.min(t.max, s)); i.val(r(s)) } } }); i.on("keyup.slider", function (e) { var t = i.val(); if (t === s) { return } i.trigger("change"); s = t }) } function f() { e(this).off("keydown.slider").off("keyup.slider") } function l(t, n) { var r, i; if (!t) { return false } else if (typeof t === "string") { t = e(t).filter("input") } else if (typeof t === "object") { if (!(t instanceof jQuery)) { i = t; t = e(); for (r = 0; r < i.length; ++r) { if (typeof i[r] === "string") { i[r] = e(i[r]) } if (i[r] instanceof jQuery) { t = t.add(i[r]) } } } t = t.filter("input") } else { return false } if (!n) { return t.length > 0 ? t.eq(0) : false } else { return t.length > 1 ? [t.eq(0), t.eq(1)] : false } } var r = e(t); e.fn.buildTrack = function (t) { this.each(function () { function B() { if (_) { var t = r.offset(), n = { top: t.top, right: t.left + r.outerWidth(), bottom: t.top + r.outerHeight(), left: t.left }, i = { top: n.top, right: n.right, bottom: n.bottom, left: n.left }, s = L !== false, o = A !== false, a = O !== false, l = M !== false, c = typeof L === "number" ? L : 0, h = typeof A === "number" ? A : 0, g = typeof O === "number" ? O : 0, S = typeof M === "number" ? M : 0, x; if (f) { if (p.length > 0) { i.top = s ? n.top - 8 : n.top; if (T) { y.children(".mark-label").each(function (t) { var n = e(this), r = n.offset(), u, a, f, c; if (l || o) { u = n.width(); if (!n.hasClass("align-left") && !n.hasClass("align-right")) { n.css("width", "auto"); a = Math.min(u, n.width()); f = r.left + Math.round(u / 2 - a / 2); c = r.left + Math.round(u / 2 + a / 2); n.css("width", "") } else { f = r.left; c = r.left + u } } i.top = s ? Math.min(r.top, i.top) : i.top; i.right = o ? Math.max(c, i.right) : i.right; i.left = l ? Math.min(f, i.left) : i.left }) } } if (v.length > 0) { i.bottom = a ? n.bottom + 8 : n.bottom; if (C) { w.children(".mark-label").each(function (t) { var n = e(this), r = n.offset(), s, u, f, c; if (l || o) { s = n.width(); if (!n.hasClass("align-left") && !n.hasClass("align-right")) { n.css("width", "auto"); u = Math.min(s, n.width()); f = r.left + Math.round(s / 2 - u / 2); c = r.left + Math.round(s / 2 + u / 2); n.css("width", "") } else { f = r.left; c = r.left + s } } i.right = o ? Math.max(c, i.right) : i.right; i.bottom = a ? Math.max(r.top + n.height(), i.bottom) : i.bottom; i.left = l ? Math.min(f, i.left) : i.left; n.css("width", "") }) } } } else { if (m.length > 0) { i.left = l ? n.left - 8 : n.left; if (k) { E.children(".mark-label").each(function (t) { var n = e(this), r = n.offset(); i.top = s ? Math.min(r.top, i.top) : i.top; i.bottom = a ? Math.max(r.top + n.height(), i.bottom) : i.bottom; i.left = l ? Math.min(r.left, i.left) : i.left }) } } if (d.length > 0) { i.right = o ? n.right + 8 : n.right; if (N) { b.children(".mark-label").each(function (t) { var n = e(this), r = n.offset(); i.top = s ? Math.min(r.top, i.top) : i.top; i.right = o ? Math.max(r.left + n.width(), i.right) : i.right; i.bottom = a ? Math.max(r.top + n.height(), i.bottom) : i.bottom }) } } } x = { marginTop: i.top < n.top ? n.top - i.top + c + "px" : c > 0 ? c + "px" : "", marginRight: i.right > n.right ? i.right - n.right + h + "px" : h > 0 ? h + "px" : "", marginBottom: i.bottom > n.bottom ? i.bottom - n.bottom + g + "px" : g > 0 ? g + "px" : "", marginLeft: i.left < n.left ? n.left - i.left + S + "px" : S > 0 ? S + "px" : "" }; if (u.autoSpacingCenterVertical && s && a && x.marginTop !== x.marginBottom) { if (x.marginTop === "") { x.marginTop = x.marginBottom } else if (x.marginBottom === "") { x.marginBottom = x.marginTop } else { x.marginTop = parseInt(x.marginTop, 10) > parseInt(x.marginBottom, 10) ? x.marginTop : x.marginBottom; x.marginBottom = x.marginTop } } if (u.autoSpacingCenterHorizontal && l && o && x.marginLeft !== x.marginRight) { if (x.marginLeft === "") { x.marginLeft = x.marginRight } else if (x.marginRight === "") { x.marginRight = x.marginLeft } else { x.marginLeft = parseInt(x.marginLeft, 10) > parseInt(x.marginRight, 10) ? x.marginLeft : x.marginRight; x.marginRight = x.marginLeft } } r.css(x) } } var r = e(this), u = e.extend({}, e.fn.buildTrack.defaults, t), a = [], f = u.orientation.toLowerCase() !== "vertical", l, c = {}, h = u.innerMarks ? s(u.innerMarks, null, null, u.min, u.max, false) : [], p = u.topMarks && f ? s(u.topMarks, u.topLabel, u.topLabelAlign, u.min, u.max, true, u.insetExtremes, true) : [], d = u.rightMarks && !f ? s(u.rightMarks, u.rightLabel, u.rightLabelAlign, u.min, u.max, true, u.insetExtremes, false) : [], v = u.bottomMarks && f ? s(u.bottomMarks, u.bottomLabel, u.bottomLabelAlign, u.min, u.max, true, u.insetExtremes, true) : [], m = u.leftMarks && !f ? s(u.leftMarks, u.leftLabel, u.leftLabelAlign, u.min, u.max, true, u.insetExtremes, false) : [], g = e(), y = e(), b = e(), w = e(), E = e(), S = e(), x = e(), T = false, N = false, C = false, k = false, L = o(u.autoSpacingTop, u.autoSpacing), A = o(u.autoSpacingRight, u.autoSpacing), O = o(u.autoSpacingBottom, u.autoSpacing), M = o(u.autoSpacingLeft, u.autoSpacing), _ = L !== false || A !== false || O !== false || M !== false, D, P, H; if (!f) { a.push("vertical") } if (typeof u.classes === "string") { a.push(u.classes) } else if (typeof u.classes === "object") { a = a.concat(u.classes) } if (u.size) { if (typeof u.size === "number") { u.size += "px" } c[f ? "width" : "height"] = u.size } else if (f) { a.push("full-width"); M = false; A = false } r.addClass(a.join(" ")); r.css(e.extend(c, u.css)); l = f ? r.innerWidth() : r.innerHeight(); if (!r[0].style.width || !r[0].style.width.match(/[0-9\.]+(px|em)/i)) { r.sizechange(function () { l = f ? r.innerWidth() : r.innerHeight(); S.each(function (t) { var n = e(this), r = n.data("mark-value"); n.css("left", Math.round((r - u.min) / (u.max - u.min) * (l - 1) + 1) + "px") }); x.each(function (t) { var n = e(this), r = n.data("mark-value"); n.css("bottom", Math.round((r - u.min) / (u.max - u.min) * (l - 1) + 1) + "px") }); if (r.onSizechange) { r.onSizechange() } B() }) } for (i = 0; i < h.length; ++i) { D = Math.round((h[i].value - u.min) / (u.max - u.min) * (l - 1)) + 1; g = g.add(e('<span class="inner-mark" style="' + (f ? "left" : "bottom") + ": " + D + 'px"></span>').appendTo(r).data("mark-value", h[i].value)) } for (i = 0; i < p.length; ++i) { D = Math.round((p[i].value - u.min) / (u.max - u.min) * (l - 1)) + 1; if (p[i].label !== n && p[i].label !== "") { H = p[i].align === "left" || p[i].align === "right" ? " align-" + p[i].align : ""; P = '<span class="mark-label' + H + '">' + p[i].label + "</span>"; T = true } else { P = "" } y = y.add(e('<span class="top-mark" style="left: ' + D + 'px">' + P + "</span>").appendTo(r).data("mark-value", p[i].value)) } for (i = 0; i < d.length; ++i) { D = Math.round((d[i].value - u.min) / (u.max - u.min) * (l - 1)) + 1; if (d[i].label !== n && d[i].label !== "") { H = d[i].align === "top" || d[i].align === "bottom" ? " align-" + d[i].align : ""; P = '<span class="mark-label' + H + '">' + d[i].label + "</span>"; N = true } else { P = "" } b = b.add(e('<span class="right-mark" style="bottom: ' + D + 'px">' + P + "</span>").appendTo(r).data("mark-value", d[i].value)) } for (i = 0; i < v.length; ++i) { D = Math.round((v[i].value - u.min) / (u.max - u.min) * (l - 1)) + 1; if (v[i].label !== n && v[i].label !== "") { H = v[i].align === "left" || v[i].align === "right" ? " align-" + v[i].align : ""; P = '<span class="mark-label' + H + '">' + v[i].label + "</span>"; C = true } else { P = "" } w = w.add(e('<span class="bottom-mark" style="left: ' + D + 'px">' + P + "</span>").appendTo(r).data("mark-value", v[i].value)) } for (i = 0; i < m.length; ++i) { D = Math.round((m[i].value - u.min) / (u.max - u.min) * (l - 1)) + 1; if (m[i].label !== n && m[i].label !== "") { H = m[i].align === "top" || m[i].align === "bottom" ? " align-" + m[i].align : ""; P = '<span class="mark-label' + H + '">' + m[i].label + "</span>"; k = true } else { P = "" } E = E.add(e('<span class="left-mark" style="bottom: ' + D + 'px">' + P + "</span>").appendTo(r).data("mark-value", m[i].value)) } S = y.add(w); x = E.add(b); if (f) { S = S.add(g) } else { x = x.add(g) } B() }); return this }; e.fn.buildTrack.defaults = { size: 250, classes: null, css: {}, orientation: "horizontal", innerMarks: null, topMarks: null, topLabel: null, topLabelAlign: "center", rightMarks: null, rightLabel: null, rightLabelAlign: "center", bottomMarks: null, bottomLabel: null, bottomLabelAlign: "center", leftMarks: null, leftLabel: null, leftLabelAlign: "center", insetExtremes: false, autoSpacing: false, autoSpacingTop: null, autoSpacingRight: null, autoSpacingBottom: null, autoSpacingLeft: null, autoSpacingCenterVertical: false, autoSpacingCenterHorizontal: false }; e.fn.slider = function (i) { u(i); this.each(function () { function P(e) { if (typeof e === "string") { if (h.thousandsSep.length) { e = e.replace(h.thousandsSep, "") } if (h.decimalPoint !== ".") { e = e.replace(h.decimalPoint, ".") } e = parseFloat(e); if (isNaN(e)) { e = 0 } } return e } function H(e) { var t; if (h.thousandsSep.length || h.decimalPoint !== ".") { t = e.toString().split("."); if (h.thousandsSep.length && t[0].length > 3) { t[0] = t[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, h.thousandsSep) } if (h.zerofill && h.round !== true && h.round > 0) { if (t.length < 2) { t.push("0") } while (t[1].length < h.round) { t[1] += "0" } } return t.join(h.decimalPoint) } if (h.zerofill && h.round !== true && h.round > 0) { t = e.toString().split("."); if (t.length < 2) { t.push("0") } while (t[1].length < h.round) { t[1] += "0" } return t.join(".") } return e } function B(t) { if (!e.inArray(t, ["top", "right", "bottom", "left"])) { t = p ? "top" : "right" } switch (t) { case "right": return '<span class="' + v.join(" ") + ' right"><span class="tooltip-value"></span><span class="block-arrow left"><span></span></span></span>'; break; case "bottom": return '<span class="' + v.join(" ") + ' bottom"><span class="tooltip-value"></span><span class="block-arrow top"><span></span></span></span>'; break; case "left": return '<span class="' + v.join(" ") + ' left"><span class="tooltip-value"></span><span class="block-arrow right"><span></span></span></span>'; break; default: return '<span class="' + v.join(" ") + '"><span class="tooltip-value"></span><span class="block-arrow"><span></span></span></span>'; break } } function j(e, t) { if (typeof e !== "number") { e = parseFloat(e); if (isNaN(e)) { e = t } } e = Math.max(h.min, Math.min(h.max, e)); if (!x || h.stickToRound) { e = I(e) } if (!x || h.stickToStep) { e = F(e) } return e } function F(e) { var t, n = false; if (h.step) { if (typeof h.step === "object") { for (t = 0; t < h.step.length; ++t) { if (e < h.step[t]) { if (n === false) { return h.step[t] } else { return e - n < h.step[t] - e ? n : h.step[t] } } n = h.step[t] } return n } else { return Math.round((e - h.min) / h.step) * h.step + h.min } } return e } function I(e) { if (h.round === true || h.round === 0) { e = Math.round(e) } else if (h.round > 0) { e = Math.round(e * Math.pow(10, h.round)) / Math.pow(10, h.round) } return e } function q(e) { if (x && !h.stickToRound) { e = I(e) } if (x && !h.stickToStep) { e = F(e) } return e } function R(e, t) { var r = e === n || e === null, i = t === n || t === null, o = false, u, a, f, l, c, p, d, v, b; e = P(e); t = P(t); e = r ? g ? O[0] : O : j(e, h.min); if (g) { t = i ? O[1] : j(t, h.max); if (t < e) { if (i) { e = t } else if (r) { t = e } else { f = t; t = e; e = f } } } if (g) { l = O[0] != e; c = O[1] != t; if (l || c || !_) { O = [e, t]; u = H(l || !_ ? q(e) : M[0]); a = H(c || !_ ? q(t) : M[1]); p = M[0] != u; d = M[1] != a; o = p || d || !_; if (o) { M = [u, a] } z(w, O[0], M[0]); z(E, O[1], M[1]); W(O[0], O[1]); if (y) { v = y[0].is(":focus"); b = y[1].is(":focus"); if (!v || x) { y[0].val(M[0]) } if (!b || x) { y[1].val(M[1]) } if (_ && C) { C = false; if (p && (!v || x)) { y[0].trigger("change") } if (d && (!b || x)) { y[1].trigger("change") } C = true } } if (_ && h.onChange) { h.onChange.call(s[0], M[0], M[1]) } } } else { change = O != e || !_; if (change) { O = e; u = H(q(e)); o = M != u || !_; if (o) { M = u } z(w, O, M); W(m ? h.min : O, m ? O : h.max); if (y) { if (!y.is(":focus") || x) { y.val(M); if (_ && C) { C = false; y.trigger("change"); C = true } } } if (_ && h.onChange) { h.onChange.call(s[0], M) } } } return o } function U() { return h.animate && _ && (!x || h.step && h.stickToStep) } function z(e, t, n) { var r = U(), i = e.children(".inner-tooltip"), r = U(), s, o = {}; e.stop(true); if (p) { e.stop(true)[r ? "animate" : "css"]({ left: Math.round((t - h.min) / (h.max - h.min) * (l - e.outerWidth(true))) + "px" }, r ? h.animateSpeed : null) } else { e.stop(true)[r ? "animate" : "css"]({ bottom: Math.round((t - h.min) / (h.max - h.min) * (l - e.outerHeight(true))) + "px" }, r ? h.animateSpeed : null) } if (typeof h.tooltipFormat === "string" && h.tooltipFormat.length > 0) { s = h.tooltipFormat.replace("[value]", n) } else if (typeof h.tooltipFormat === "function") { s = h.tooltipFormat(n) } else { s = n } if (N) { i.children(".tooltip-value").text(s); if (!i.hasClass("left") && !i.hasClass("right")) { i.css("margin-left", -Math.round(i.outerWidth() / 2) + "px") } } else { e.prop("title", n) } } function W(e, t) { var n = U(); if (p) { b.stop(true)[n ? "animate" : "css"]({ left: Math.round((e - h.min) / (h.max - h.min) * l) + "px", right: Math.round((h.max - t) / (h.max - h.min) * l) + "px" }, n ? h.animateSpeed : null) } else { b.stop(true)[n ? "animate" : "css"]({ bottom: Math.round((e - h.min) / (h.max - h.min) * l) + "px", top: Math.round((h.max - t) / (h.max - h.min) * l) + "px" }, n ? h.animateSpeed : null) } } var s = e(this), o = this.nodeName.toLowerCase() === "input", l, c = e.extend({}, i, u(s.data("slider-options"))), h = e.extend({}, e.fn.slider.defaults, c), p = h.orientation.toLowerCase() !== "vertical", d = ["slider-bar"], v = ["message", "inner-tooltip"], m = h.barMode.toLowerCase() !== "max", g = h.inputs !== null || h.values !== null, y = g ? h.inputs : o ? s : h.input, b, w, E, S, x = false, T = false, N = h.tooltip !== null && h.tooltip !== false, C = true, k, L, A, O, M, _ = false, D; if (y) { if (g) { if (h.hideInput) { y[0].hide(); y[1].hide() } else { if (y[0].prop("type").toLowerCase() !== "hidden") { y[0].focus(function () { a.call(this, h, P, H) }).blur(function () { f.call(this); y[0].val(M[0]) }) } if (y[1].prop("type").toLowerCase() !== "hidden") { y[1].focus(function () { a.call(this, h, P, H) }).blur(function () { f.call(this); y[1].val(M[1]) }) } } y[0].change(function (e) { if (C) { C = false; R(y[0].val(), null); C = true } }); y[1].change(function (t) { if (C) { C = false; R(null, e(this).val()); C = true } }) } else { if (h.hideInput) { y.hide() } else if (y.prop("type").toLowerCase() !== "hidden") { y.focus(function () { a.call(this, h, P, H) }).blur(function () { f.call(this); y.val(M) }) } y.change(function (t) { if (C) { C = false; R(e(this).val()); C = true } }) } } if (g) { if (y && !c.values) { O = [j(P(y[0].val()), h.min), j(P(y[1].val()), h.max)] } else { O = [j(P(h.values[0]), h.min), j(P(h.values[1]), h.max)] } M = [q(O[0]), q(O[1])] } else { if (y && !c.values) { O = j(P(y.val()), h.min) } else { O = j(P(h.value), h.min) } M = q(O) } if (o) { s = e("<span></span>").insertAfter(s) } s.addClass("slider").buildTrack(h); l = p ? s.innerWidth() : s.innerHeight(); if (typeof h.barClasses === "string") { d.push(h.barClasses) } else if (typeof h.barClasses === "object") { d = d.concat(h.barClasses) } b = e('<span class="' + d.join(" ") + '"></span>'); b[h.innerMarksOverBar ? "prependTo" : "appendTo"](s); if (h.stripes) { A = h.darkStripes ? "dark-" : ""; k = h.stripesSize === "big" || h.stripesSize === "thin" ? h.stripesSize + "-" : ""; L = h.animatedStripes ? " animated" : ""; b.append('<span class="' + A + k + "stripes" + L + '"></span>') } D = ""; if (N) { if (typeof h.tooltipClass === "string") { v.push(h.tooltipClass) } else if (typeof h.tooltipClass === "object") { v = v.concat(h.tooltipClass) } if (typeof h.tooltip !== "object") { h.tooltip = [h.tooltip, h.tooltip] } D = B(h.tooltip[0]) } w = e('<span class="slider-cursor' + (h.knob ? " knob" : "") + '">' + D + "</span>").appendTo(s); S = w; if (g) { if (N && h.tooltip[0] !== h.tooltip[1]) { D = B(h.tooltip[1]) } w.data("slider-range-index", 0); E = e('<span class="slider-cursor' + (h.knob ? " knob" : "") + '">' + D + "</span>").appendTo(s).data("slider-range-index", 1); S = S.add(E) } if (N && h.tooltipOnHover) { if (!Modernizr.touch) { s.hover(function (e) { if (!x) { S.children(".inner-tooltip").stop(true).fadeTo("fast", 1) } T = true }, function (e) { if (!x) { S.children(".inner-tooltip").stop(true).fadeTo("fast", 0) } T = false }) } S.children(".inner-tooltip").hide() } if (!s[0].style.width || !s[0].style.width.match(/[0-9\.]+(px|em)/i)) { s.sizechange(function () { _ = false; l = p ? s.innerWidth() : s.innerHeight(); if (g) { z(w, O[0], M[0]); z(E, O[1], M[1]); W(O[0], O[1]) } else { z(w, O, M); W(m ? h.min : O, m ? O : h.max) } _ = true }) } R(null, null); if (h.clickableTrack) { s.click(function (e) { if (e.target !== this && e.target !== b[0]) { return } var t = s.offset(), n = p ? e.pageX - t.left : t.top + l - e.pageY, r = h.min + n / l * (h.max - h.min), i; if (g) { i = r < (O[0] + O[1]) / 2; R(i ? r : null, i ? null : r) } else { R(r) } }) } S.on("touchstart mousedown", function (n) { function y(e) { var t = l - (p ? i.outerWidth(true) : i.outerHeight(true)), n = o ? e.originalEvent.touches[0] : e, r = Math.max(0, Math.min(t, c + (p ? n.pageX - a : f - n.pageY))), s = h.min + r / t * (h.max - h.min); R(!g || i.data("slider-range-index") == 0 ? s : null, g && i.data("slider-range-index") == 1 ? s : null) } function b() { r.off(o ? "touchmove" : "mousemove", y); r.off(o ? "touchend" : "mouseup", b); x = false; i.removeClass("dragging"); if (h.step && !h.stickToStep) { if (g) { R(O[0], O[1]) } else { R(O) } } if (v) { d.addClass("compact"); if (!d.hasClass("left") && !d.hasClass("right")) { d.css("margin-left", -Math.round(d.outerWidth() / 2) + "px") } } if (N && h.tooltipOnHover && !T) { d.fadeOut() } if (m) { t.onselectstart = m } if (h.onEndDrag) { if (g) { h.onEndDrag.call(s[0], M[0], M[1]) } else { h.onEndDrag.call(s[0], M) } } } var i = e(this).addClass("dragging"), o = n.type === "touchstart", u = o ? n.originalEvent.touches[0] : n, a = u.pageX, f = u.pageY, c = p ? i.parseCSSValue("left") : i.parseCSSValue("bottom"), d = i.children(".inner-tooltip"), v = false, m; n.preventDefault(); m = t.onselectstart; t.onselectstart = function () { return false }; x = true; if (N && h.tooltipOnHover && Modernizr.touch) { d.fadeIn() } if (N && h.tooltipBiggerOnDrag && d.hasClass("compact")) { d.removeClass("compact"); if (!d.hasClass("left") && !d.hasClass("right")) { d.css("margin-left", -Math.round(d.outerWidth() / 2) + "px") } v = true } r.on(o ? "touchmove" : "mousemove", y); r.on(o ? "touchend" : "mouseup", b); if (h.onStartDrag) { if (g) { h.onStartDrag.call(s[0], M[0], M[1]) } else { h.onStartDrag.call(s[0], M) } } }); _ = true; s.data("slider", { element: s, setValue: R, formatValue: H, unformatValue: P }); if (y) { if (g) { y[0].data("slider", s.data("slider")); y[1].data("slider", s.data("slider")) } else { y.data("slider", s.data("slider")) } } }); return this }; e.fn.slider.defaults = { min: 0, max: 100, round: true, stickToRound: false, step: null, stickToStep: true, value: 50, values: null, input: null, inputs: null, hideInput: true, orientation: "horizontal", barClasses: null, barMode: "min", innerMarksOverBar: false, stripes: false, animatedStripes: true, darkStripes: true, stripesSize: "normal", knob: false, animate: true, animateSpeed: "fast", tooltip: "auto", tooltipFormat: null, tooltipOnHover: true, tooltipBiggerOnDrag: true, tooltipClass: ["compact", "black-gradient", "glossy"], clickableTrack: true, decimalPoint: ".", thousandsSep: "", zerofill: true, onStartDrag: null, onChange: null, onEndDrag: null }; e.fn.setSliderValue = function (t, n) { return this.each(function () { var r = e(this), i = r.data("slider"); if (i) { i.setValue(t, n) } }) }; e.fn.progress = function (t, r) { if (typeof t === "object" && t !== null) { r = t; t = null } this.each(function () { var i = e(this), s = t, o, u = e.extend({}, r, i.data("progress-options")), a = e.extend({}, e.fn.progress.defaults, u), f = a.orientation.toLowerCase() !== "vertical", l = ["progress-bar"], c = a.barMode.toLowerCase() !== "max", h, p = e(), d = false, v, m = false, g = function (e) { if (typeof e !== "number") { e = parseFloat(e, 10) || a.min } e = Math.max(a.min, Math.min(a.max, e)); e = b(e); e = y(e); return e }, y = function (e) { var t, n = false; if (a.step) { if (typeof a.step === "object") { for (t = 0; t < a.step.length; ++t) { if (e < a.step[t]) { if (n === false) { return a.step[t] } else { return e - n < a.step[t] - e ? n : a.step[t] } } n = a.step[t] } return n } else { return Math.round((e - a.min) / a.step) * a.step + a.min } } return e }, b = function (e) { if (a.round === true || a.round === 0) { e = Math.round(e) } else if (a.round > 0) { e = Math.round(e * Math.pow(10, a.round)) / Math.pow(10, a.round) } return e }, w = function (e, t) { var r = e, i = false, o, u; if (typeof e !== "number") { if (e && e.length > 0) { e = parseFloat(e); if (isNaN(e)) { e = a.value } } else { e = a.value } } e = g(e); u = s != e || !m; if (u) { s = e; if (t === true || (t === null || t == n) && a.showValue) { p.text(r) } else { p.empty() } S(c ? a.min : s, c ? s : a.max) } return u }, E = function () { return a.animate && m }, S = function (e, t) { var n = E(); if (f) { h.stop(true)[n ? "animate" : "css"]({ left: Math.round((e - a.min) / (a.max - a.min) * o) + "px", right: Math.round((a.max - t) / (a.max - a.min) * o) + "px" }, n ? a.animateSpeed : null) } else { h.stop(true)[n ? "animate" : "css"]({ bottom: Math.round((e - a.min) / (a.max - a.min) * o) + "px", top: Math.round((a.max - t) / (a.max - a.min) * o) + "px" }, n ? a.animateSpeed : null) } }, x = function (t) { var n = t ? a : e.extend({}, a, t), r, i, s; if (!d) { s = n.darkStripes ? "dark-" : ""; r = n.stripesSize === "big" || n.stripesSize === "thin" ? n.stripesSize + "-" : ""; i = n.animatedStripes ? " animated" : ""; d = e('<span class="' + s + r + "stripes" + i + '"></span>').appendTo(h); if (m) { d.hide().fadeIn() } } }, T = function () { if (d) { d.fadeOut(function () { e(this).remove() }); d = false } }, N = function (e, t) { h.removeClass("silver-gradient black-gradient anthracite-gradient grey-gradient white-gradient red-gradient orange-gradient green-gradient blue-gradient"); h.addClass(e); if (t === true || t === false) { h[t ? "addClass" : "removeClass"]("glossy") } }; if (s === null || s == n) { s = e.trim(i.text()) } i.empty(); if (a.style && (a.style === "thin" || a.style === "large")) { i.addClass(a.style) } v = f && !i.hasClass("thin") || !f && i.hasClass("large"); if (v) { p = p.add(e('<span class="progress-text"></span>').appendTo(i)) } i.addClass("progress").buildTrack(a); o = f ? i.innerWidth() : i.innerHeight(); if (typeof a.barClasses === "string") { l.push(a.barClasses) } else if (typeof a.barClasses === "object") { l = l.concat(a.barClasses) } h = e('<span class="' + l.join(" ") + '"></span>'); h[a.innerMarksOverBar ? "prependTo" : "appendTo"](i); if (v) { p = p.add(e('<span class="progress-text"></span>').appendTo(h)) } if (a.stripes) { x() } if (!i[0].style.width || !i[0].style.width.match(/[0-9\.]+(px|em)/i)) { i.on(f ? "widthchange" : "heightchange", function () { m = false; o = f ? i.innerWidth() : i.innerHeight(); S(c ? a.min : s, c ? s : a.max); m = true }) } w(s); m = true; i.data("progress", { setValue: w, showStripes: x, hideStripes: T, changeBarColor: N }) }); return this }; e.fn.progress.defaults = { min: 0, max: 100, round: true, step: null, value: 0, orientation: "horizontal", style: null, showValue: true, barClasses: null, barMode: "min", innerMarksOverBar: false, stripes: false, animatedStripes: true, darkStripes: true, stripesSize: "normal", animate: true, animateSpeed: "fast" }; e.fn.setProgressValue = function (t, n) { return this.each(function () { var r = e(this), i = r.data("progress"); if (i) { i.setValue(t, n) } }) }; e.fn.showProgressStripes = function (t) { return this.each(function () { var n = e(this), r = n.data("progress"); if (r) { r.showStripes(t) } }) }; e.fn.hideProgressStripes = function () { return this.each(function () { var t = e(this), n = t.data("progress"); if (n) { n.hideStripes() } }) }; e.fn.changeProgressBarColor = function (t, n) { return this.each(function () { var r = e(this), i = r.data("progress"); if (i) { i.changeBarColor(t, n) } }) } })(jQuery, document)