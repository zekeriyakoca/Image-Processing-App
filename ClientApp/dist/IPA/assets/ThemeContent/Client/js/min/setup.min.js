(function (e, t, n, r) { function w() { var e = d.offset().top, t = s.scrollTop(); if (t < 2) { return } if (Math.round(e) != Math.round(t)) { v = false; m.css({ right: "auto", bottom: "auto" }); var n = function () { E(m) }; n(); s.on("scroll", n); i.on("normalized-resize orientationchange", n) } d.remove(); s.off("scroll", w) } function E(t) { var n = s.scrollTop(), r = s.scrollLeft(), i = e.template.viewportWidth, o = e.template.viewportHeight; t.each(function (t) { var s = e(this), u = s.data("fixed-position"), a, f; if (u.top) { a = u.top.percentage ? u.top.value * o : u.top.value; s.css("top", n + a + "px") } if (u.left) { f = u.left.percentage ? u.left.value * i : u.left.value; s.css("left", r + f + "px") } if (u.right) { if (u.left) { s.width(i - f - (u.right.percentage ? u.right.value * i : u.right.value)) } else { s.css("left", r + (u.right.percentage ? (1 - u.right.value) * i : i - u.right.value) - s.outerWidth() + "px") } } if (u.bottom) { if (u.top) { s.height(o - a - (u.bottom.percentage ? u.bottom.value * o : u.bottom.value)) } else { s.css("top", n + (u.bottom.percentage ? (1 - u.bottom.value) * o : o - u.bottom.value) - s.outerHeight() + "px") } } }) } function x(t) { if (!b) { return false } var n = e.template.disableDOMWatch(), r = e('<div id="mediaquery-checker"></div>').appendTo(o), i = r.width(), u = r.height(), a = e.template.mediaQuery.name, f, l, c; r.remove(); if (n) { e.template.enableDOMWatch() } e.template.mediaQuery.on = []; e.each(h, function (t, n) { e.template.mediaQuery.on.push(n[1]); if (i <= n[0]) { e.template.mediaQuery.name = n[1]; return false } }); e.template.mediaQuery.hires = u >= p; f = a != e.template.mediaQuery.name; if (f && t) { if (a.indexOf("-") > -1) { l = a.split("-").shift() } if (e.template.mediaQuery.name.indexOf("-") > -1) { c = e.template.mediaQuery.name.split("-").shift() } s.trigger("quit-query-" + a); if (l && (!c || c != l)) { s.trigger("quit-query-" + l) } s.trigger("change-query"); if (c && (!l || l != c)) { s.trigger("enter-query-" + c) } s.trigger("enter-query-" + e.template.mediaQuery.name) } return f } function T() { e.template.viewportWidth = i.width(); e.template.viewportHeight = e.template.iPhone ? t.innerHeight : i.height(); i.trigger("normalized-preresize"); x(true); o.refreshInnerTrackedElements(); i.trigger("normalized-resize"); c = false } function A(n) { var i = n || t.event, s = i.originalEvent || i, o = [].slice.call(arguments, 1), u = 0, a = 0, f = 0; n = e.event.fix(s); n.type = "mousewheel"; if (s.wheelDelta) { u = s.wheelDelta / 120 } if (s.detail) { u = -s.detail / 3 } f = u; if (s.axis !== r && s.axis === s.HORIZONTAL_AXIS) { f = 0; a = -1 * u } if (s.wheelDeltaY !== r) { f = s.wheelDeltaY / 120 } if (s.wheelDeltaX !== r) { a = -1 * s.wheelDeltaX / 120 } o.unshift(n, u, a, f); return (e.event.dispatch || e.event.handle).apply(this, o) } var i = e(t), s = e(n), o = e(n.body), u = true, a = true, f = [], l = [], c = false, h = [[10, "mobile-portrait"], [20, "mobile-landscape"], [30, "tablet-portrait"], [40, "tablet-landscape"], [50, "desktop"]], p = 20, d, v = true, m = e(), g = false, y = 0, b = false; e.template = { keys: { tab: 9, enter: 13, space: 32, left: 37, up: 38, right: 39, down: 40 }, respondPath: e("script").last().attr("src").replace(/[^\/]+$/, "") + "libs/", mediaQuery: { name: "mobile-portrait", on: ["mobile-portrait"], hires: false, has: function (t) { return e.inArray(t, e.template.mediaQuery.on) > -1 }, is: function (t) { return e.template.mediaQuery.name.indexOf(t.toLowerCase()) === 0 }, isSmallerThan: function (t) { return !e.template.mediaQuery.has(t) } }, ie7: !!(n.all && !n.querySelector), ie8: !!(n.all && n.querySelector && !n.getElementsByClassName), iPhone: !!navigator.userAgent.match(/iPhone/i), iPod: !!navigator.userAgent.match(/iPod/i), iPad: !!navigator.userAgent.match(/iPad/i), android: !!navigator.userAgent.match(/Android/i) }; e.template.iOs = e.template.iPhone || e.template.iPod || e.template.iPad; e.template.touchOs = e.template.iOs || e.template.android; e.template.viewportWidth = i.width(); e.template.viewportHeight = e.template.iPhone ? t.innerHeight : i.height(); yepnope({ test: Modernizr.mq("(min-width:0)"), nope: [e.template.respondPath + "respond.min.js"] }); if (Modernizr.touch) { s.on("touchstart", function (e) { g = false; ++y }).on("touchmove", function (e) { g = true }) } e.template.processTouchClick = function (t, n) { if (!n) { return true } if (n.type === "touchend") { if (!g) { e(t).data("touchstart-ID", y); return true } else { return false } } else if (n.type === "click") { if (e(t).data("touchstart-ID") === y) { return false } else { return true } } return true }; d = e('<div style="position:fixed; top:0"></div>').appendTo(o); s.on("scroll", w); e.fn.detectFixedBounds = function () { this.css({ top: "", right: "", bottom: "", left: "", width: "", height: "" }); this.each(function () { var t = e(this), n = ["top", "right", "bottom", "left"], r = {}, i, s; for (i = 0; i < n.length; ++i) { s = t.css(n[i]); if (s.match(/^-?[0-9]+px$/)) { r[n[i]] = { value: parseInt(s, 10), percentage: false } } else if (s.match(/^-?[0-9]+px$/)) { r[n[i]] = { value: parseFloat(s) / 100, percentage: true } } } if (!r.top && !r.bottom) { r.top = { value: 0, percentage: false } } if (!r.left && !r.right) { r.left = { value: 0, percentage: false } } t.data("fixed-position", r) }); if (!v) { this.css({ right: "auto", bottom: "auto" }); E(this) } return this }; e.fn.enableFixedFallback = function () { m = m.add(this.detectFixedBounds()) }; e.fn.disableFixedFallback = function () { this.css({ top: "", right: "", bottom: "", left: "", width: "", height: "" }); m = m.not(this.removeData("fixed-position")) }; e.fn.parseCSSValue = function (e, t) { var n = parseInt(this.css(e), 10); return isNaN(n) ? t || 0 : n }; e.fn.hasInlineCSS = function (e) { if (this.length === 0) { return false } var t = new RegExp("(^| |	|;)" + e + "s*:", "i"); return t.test(this.getStyleString()) }; e.fn.getStyleString = function () { if (this.length === 0) { return "" } var t = !e.support.style ? this[0].style.cssText.toLowerCase() : this[0].getAttribute("style"); return t || "" }; e.fn.filterFollowing = function (t, n) { var r = e(), i; if (!t || t === "") { return r.add(this) } else if (this.length === 0) { return r } i = this[n ? "last" : "first"](); while (i.is(t)) { r = r.add(i); i = i[n ? "prev" : "next"]() } return r }; e.fn.prevImmediates = function (e) { return this.prevAll().filterFollowing(e) }; e.fn.nextImmediates = function (e) { return this.nextAll().filterFollowing(e) }; e.fn.childrenImmediates = function (e, t) { return this.children().filterFollowing(e, t) }; e.fn.tempShow = function () { var t = e(); this.each(function (n) { var r = e(this); if (r.css("display") === "none") { t = t.add(r.show()) } r.parentsUntil("body").each(function () { var n = e(this), r = false; if (n.css("display") === "none") { t = t.add(n.show()); r = true } if (this.nodeName.toLowerCase() === "details" && !this.open) { n.prop("open", true).data("tempShowDetails", true); if (!r) { t = t.add(n) } } previous = n }) }); return t }; e.fn.tempShowRevert = function () { return this.css("display", "").each(function (t) { var n = e(this); if (n.css("display") !== "none" && !n.data("tempShowDetails")) { n.css("display", "none") } if (this.nodeName.toLowerCase() === "details" && n.data("tempShowDetails")) { n.prop("open", false).removeData("tempShowDetails") } }) }; var S = { sizeElements: e(), widthElements: e(), heightElements: e(), scrollElements: e(), interval: 250, timeout: false, watch: function () { if (e.isReady) { S.sizeElements.each(function (t) { var n = e(this), r = n.width(), i = n.height(), s = n.data("sizecache") || { width: 0, height: 0 }; if (r != s.width || i != s.height) { n.data("sizecache", { width: r, height: i }); n.trigger("sizechange", [r != s.width, i != s.height]) } }); S.widthElements.each(function (t) { var n = e(this), r = n.width(), i = n.data("widthcache") || 0; if (r != i) { n.data("widthcache", r); n.trigger("widthchange", [r]) } }); S.heightElements.each(function (t) { var n = e(this), r = n.height(), i = n.data("heightcache") || 0; if (r != i) { n.data("heightcache", r); n.trigger("heightchange", [r]) } }); S.scrollElements.each(function (t) { var n = e(this), r = this.scrollWidth, i = this.scrollHeight, s = n.data("scrollcache") || { width: 0, height: 0 }; if (r != s.width || i != s.height) { n.data("scrollcache", { width: r, height: i }); n.trigger("scrollsizechange", [r != s.width, i != s.height]) } }) } S.timeout = setTimeout(S.watch, S.interval) }, start: function () { if (!S.timeout) { S.timeout = setTimeout(S.watch, S.interval) } }, stop: function () { if (S.sizeElements.length === 0 && S.widthElements.length === 0 && S.heightElements.length === 0 && S.scrollElements.length === 0) { clearTimeout(S.timeout); S.timeout = false } } }; e.event.special.sizechange = { setup: function () { var t = e(this); t.data("sizecache", { width: t.width(), height: t.height() }); S.sizeElements = S.sizeElements.add(this); S.start() }, teardown: function () { S.sizeElements = S.sizeElements.not(this); e(this).removeData("sizecache"); S.stop() } }; e.event.special.widthchange = { setup: function () { var t = e(this); t.data("widthcache", t.width()); S.widthElements = S.widthElements.add(this); S.start() }, teardown: function () { S.widthElements = S.widthElements.not(this); e(this).removeData("widthcache"); S.stop() } }; e.event.special.heightchange = { setup: function () { var t = e(this); t.data("heightcache", t.height()); S.heightElements = S.heightElements.add(this); S.start() }, teardown: function () { S.heightElements = S.heightElements.not(this); e(this).removeData("heightcache"); S.stop() } }; e.event.special.scrollsizechange = { setup: function () { e(this).data("scrollcache", { width: this.scrollWidth, height: this.scrollHeight }); S.scrollElements = S.scrollElements.add(this); S.start() }, teardown: function () { S.scrollElements = S.scrollElements.not(this); e(this).removeData("scrollcache"); S.stop() } }; e.fn.sizechange = function (e) { return typeof e === "function" ? this.on("sizechange", e) : this.trigger("sizechange") }; e.fn.widthchange = function (e) { return typeof e === "function" ? this.on("widthchange", e) : this.trigger("widthchange") }; e.fn.heightchange = function (e) { return typeof e === "function" ? this.on("heightchange", e) : this.trigger("heightchange") }; e.fn.scrollsizechange = function (e) { return typeof e === "function" ? this.on("scrollsizechange", e) : this.trigger("scrollsizechange") }; e.each([{ name: "wrapAll", clear: false, setup: { prepare: false, target: function () { return this.parent() }, self: true, subs: false } }, { name: "wrapInner", clear: false, setup: { prepare: false, target: function () { return this.children() }, self: true, subs: false } }, { name: "wrap", clear: false, setup: { prepare: false, target: function () { return this.parent() }, self: true, subs: false } }, { name: "unwrap", clear: { target: function () { return this.parent() }, self: true, subs: false }, setup: false }, { name: "append", clear: false, setup: { prepare: function () { return this.children() }, target: function (e) { return this.children().not(e) }, self: true, subs: true } }, { name: "prepend", clear: false, setup: { prepare: function () { return this.children() }, target: function (e) { return this.children().not(e) }, self: true, subs: true } }, { name: "before", clear: false, setup: { prepare: function () { return this.prevAll() }, target: function (e) { return this.prevAll().not(e) }, self: true, subs: true } }, { name: "after", clear: false, setup: { prepare: function () { return this.nextAll() }, target: function (e) { return this.nextAll().not(e) }, self: true, subs: true } }, { name: "remove", clear: { target: function () { return this }, self: true, subs: true }, setup: false }, { name: "empty", clear: { target: function () { return this }, self: false, subs: true }, setup: false }, { name: "html", clear: { target: function () { return this }, self: false, subs: true }, setup: { prepare: false, target: function () { return this }, self: true, subs: false } }], function () { var t = this, n = e.fn[t.name]; e.fn[t.name] = function () { var e, r = false, i; if (u && a) { if (t.clear) { t.clear.target.call(this).applyClear(t.clear.self, t.clear.sub) } if (t.setup && t.setup.prepare) { r = t.setup.prepare.call(this) } } a = false; i = n.apply(this, Array.prototype.slice.call(arguments)); a = true; if (u && a && t.setup) { t.setup.target.call(this, r).applySetup(t.setup.self, t.setup.sub) } return i } }); e.template.enableDOMWatch = function () { u = true }; e.template.disableDOMWatch = function () { var e = u; u = false; return e }; e.template.addClearFunction = function (e, t) { l[t ? "unshift" : "push"](e) }; e.fn.addClearFunction = function (t, n) { this.each(function (r) { var i = e(this), s = i.data("clearFunctions") || []; if (!s.length || e.inArray(t, s) < 0) { s[n ? "unshift" : "push"](t); i.addClass("withClearFunctions").data("clearFunctions", s) } }); return this }; e.fn.removeClearFunction = function (t) { this.each(function () { var n = e(this), r = n.data("clearFunctions") || [], i; for (i = 0; i < r.length; ++i) { if (r[i] === t) { r.splice(i, 1); --i } } if (r.length > 0) { n.data("clearFunctions", r) } else { n.removeClass("withClearFunctions").removeData("clearFunctions") } }); return this }; e.fn.applyClear = function (t, n) { var i = this, s = e.template.disableDOMWatch(); if (t === r) t = true; if (n === r) n = true; e.each(l, function () { i = this.call(i, t, n) }); if (s) { e.template.enableDOMWatch() } return this }; e.template.addSetupFunction = function (e, t) { f[t ? "unshift" : "push"](e) }; e.fn.applySetup = function (t, n) { var i = this, s = e.template.disableDOMWatch(); if (t === r) t = true; if (n === r) n = true; e.each(f, function () { this.call(i, t, n) }); if (s) { e.template.enableDOMWatch() } return this }; e.fn.findIn = function (t, n, r) { var i = e(this); if (t && n) { return i.filter(r).add(i.find(r)) } else { return i[t ? "filter" : "find"](r) } }; e.template.addSetupFunction(function (t, n) { if (e.fn.details) { this.findIn(t, n, "details").details() } if (e("html").hasClass("no-generatedcontent")) { var r = { plus: "&#61462;", minus: "&#61465;", info: "&#61470;", "left-thin": "&#61581;", "up-thin": "&#61583;", "right-thin": "&#61582;", "down-thin": "&#61580;", "level-up": "&#61588;", "level-down": "&#61587;", "switch": "&#61591;", infinity: "&#61635;", "squared-plus": "&#61464;", "squared-minus": "&#61467;", home: "&#61474;", keyboard: "&#61499;", erase: "&#61636;", pause: "&#61594;", forward: "&#61598;", backward: "&#61599;", next: "&#61596;", previous: "&#61597;", hourglass: "&#61540;", stop: "&#61593;", "triangle-up": "&#61575;", play: "&#61592;", "triangle-right": "&#61574;", "triangle-down": "&#61572;", "triangle-left": "&#61573;", adjust: "&#61544;", cloud: "&#61619;", star: "&#61448;", "star-empty": "&#61449;", cup: "&#61511;", list: "&#61457;", moon: "&#61622;", "heart-empty": "&#61447;", heart: "&#61446;", "music-note": "&#61440;", "beamed-note": "&#61441;", thumbs: "&#61456;", flag: "&#61483;", tools: "&#61527;", gear: "&#61526;", warning: "&#61503;", lightning: "&#61621;", record: "&#61595;", "thunder-cloud": "&#61620;", voicemail: "&#61641;", plane: "&#61623;", mail: "&#61445;", pencil: "&#61495;", feather: "&#61496;", tick: "&#61458;", cross: "&#61459;", "cross-round": "&#61460;", "squared-cross": "&#61461;", question: "&#61468;", quote: "&#61492;", "plus-round": "&#61463;", "minus-round": "&#61466;", right: "&#61570;", arrow: "&#61509;", fwd: "&#61491;", undo: "&#61584;", redo: "&#61585;", left: "&#61569;", up: "&#61571;", down: "&#61568;", "list-add": "&#61607;", "numbered-list": "&#61606;", "left-fat": "&#61577;", "right-fat": "&#61578;", "up-fat": "&#61579;", "down-fat": "&#61576;", "add-user": "&#61452;", "question-round": "&#61469;", "info-round": "&#61471;", eye: "&#61479;", "price-tag": "&#61480;", "cloud-upload": "&#61488;", reply: "&#61489;", "reply-all": "&#61490;", code: "&#61493;", extract: "&#61494;", printer: "&#61497;", refresh: "&#61498;", speech: "&#61500;", chat: "&#61501;", card: "&#61505;", directions: "&#61506;", marker: "&#61507;", map: "&#61508;", compass: "&#61510;", trash: "&#61512;", page: "&#61513;", "page-list-inverted": "&#61517;", pages: "&#61514;", frame: "&#61515;", drawer: "&#61522;", rss: "&#61524;", path: "&#61528;", cart: "&#61530;", shareable: "&#61529;", login: "&#61533;", logout: "&#61534;", volume: "&#61538;", expand: "&#61546;", reduce: "&#61547;", "new-tab": "&#61548;", publish: "&#61549;", browser: "&#61550;", "arrow-combo": "&#61551;", "pie-chart": "&#61637;", language: "&#61643;", air: "&#61647;", database: "&#61652;", drive: "&#61653;", bucket: "&#61654;", thermometer: "&#61655;", "down-round": "&#61552;", "left-round": "&#61553;", "right-round": "&#61554;", "up-round": "&#61555;", "chevron-down": "&#61556;", "chevron-left": "&#61557;", "chevron-right": "&#61558;", "chevron-up": "&#61559;", "chevron-small-down": "&#61560;", "chevron-small-left": "&#61561;", "chevron-small-right": "&#61562;", "chevron-small-up": "&#61563;", "chevron-thin-down": "&#61564;", "chevron-thin-left": "&#61565;", "chevron-thin-right": "&#61566;", "chevron-thin-up": "&#61567;", "progress-0": "&#61600;", "progress-1": "&#61601;", "progress-2": "&#61602;", "progress-3": "&#61603;", "back-in-time": "&#61611;", network: "&#61614;", mailbox: "&#61616;", download: "&#61617;", buoy: "&#61626;", tag: "&#61627;", dot: "&#61630;", "two-dots": "&#61631;", ellipsis: "&#61632;", suitcase: "&#61629;", "flow-cascade": "&#61657;", "flow-branch": "&#61658;", "flow-tree": "&#61659;", "flow-line": "&#61660;", "flow-parallel": "&#61661;", brush: "&#61633;", "paper-plane": "&#61624;", magnet: "&#61634;", gauge: "&#61663;", "traffic-cone": "&#61664;", "icon-creative-commons": "&#61665;", "cc-by": "&#61666;", "cc-nc": "&#61667;", "cc-nc-eu": "&#61668;", "cc-nc-jp": "&#61669;", "cc-sa": "&#61670;", "cc-nd": "&#61671;", "cc-pd": "&#61672;", "cc-zero": "&#61673;", "cc-share": "&#61674;", "cc-remix": "&#61675;", github: "&#61676;", "github-circled": "&#61677;", flickr: "&#61678;", "flickr-circled": "&#61679;", vimeo: "&#61680;", "vimeo-circled": "&#61681;", twitter: "&#61682;", "twitter-circled": "&#61683;", facebook: "&#61684;", "facebook-circled": "&#61685;", "facebook-squared": "&#61686;", gplus: "&#61687;", "gplus-circled": "&#61688;", pinterest: "&#61689;", "pinterest-circled": "&#61690;", tumblr: "&#61691;", "tumblr-circled": "&#61692;", linkedin: "&#61693;", "linkedin-circled": "&#61694;", dribbble: "&#61695;", "dribbble-circled": "&#61696;", stumbleupon: "&#61697;", "stumbleupon-circled": "&#61698;", lastfm: "&#61699;", "lastfm-circled": "&#61700;", rdio: "&#61701;", "rdio-circled": "&#61702;", spotify: "&#61703;", "spotify-circled": "&#61704;", qq: "&#61705;", instagrem: "&#61706;", dropbox: "&#61707;", evernote: "&#61708;", flattr: "&#61709;", skype: "&#61710;", "skype-circled": "&#61711;", renren: "&#61712;", "sina-weibo": "&#61713;", paypal: "&#61714;", picasa: "&#61715;", soundcloud: "&#61716;", mixi: "&#61717;", behance: "&#61718;", "google-circles": "&#61719;", vkontakte: "&#61720;", smashing: "&#61721;", "db-shape": "&#61723;", "bullet-list": "&#61722;", "db-logo": "&#61724;", pictures: "&#61454;", globe: "&#61618;", leaf: "&#61625;", "graduation-cap": "&#61642;", mic: "&#61535;", palette: "&#61605;", ticket: "&#61644;", movie: "&#61453;", target: "&#61604;", music: "&#61442;", trophy: "&#61609;", like: "&#61484;", unlike: "&#61485;", bag: "&#61531;", user: "&#61450;", users: "&#61451;", "light-bulb": "&#61541;", "new": "&#61504;", water: "&#61645;", droplet: "&#61646;", "credit-card": "&#61648;", monitor: "&#61612;", briefcase: "&#61628;", save: "&#61649;", cd: "&#61615;", folder: "&#61521;", "page-list": "&#61516;", calendar: "&#61532;", "line-graph": "&#61638;", "bar-graph": "&#61639;", clipboard: "&#61650;", paperclip: "&#61476;", ribbons: "&#61482;", book: "&#61520;", read: "&#61519;", phone: "&#61525;", megaphone: "&#61651;", outbox: "&#61487;", inbox: "&#61486;", box: "&#61523;", newspaper: "&#61518;", mobile: "&#61613;", wifi: "&#61608;", camera: "&#61455;", swap: "&#61589;", loop: "&#61590;", cycle: "&#61586;", "light-down": "&#61542;", "light-up": "&#61543;", mute: "&#61536;", loud: "&#61537;", battery: "&#61610;", search: "&#61443;", key: "&#61656;", lock: "&#61477;", unlock: "&#61478;", bell: "&#61502;", ribbon: "&#61481;", link: "&#61475;", revert: "&#61473;", flashlight: "&#61444;", "area-graph": "&#61640;", clock: "&#61539;", rocket: "&#61662;", forbidden: "&#61545;" }; this.findIn(t, n, '[class^="icon-"],[class*=" icon-"]').not(".old-icon").each(function (t) { var n = /icon-([^ ]+)/.exec(this.className)[1], i = e(this).addClass("old-icon"); if (r[n]) { i.children(".icon-font:first").remove(); i.prepend('<span class="font-icon' + (i.is(":empty") ? " empty" : "") + '">' + r[n] + "</span>") } }) } if (e.template.ie7) { var i = { ".bullet-list > li": { before: '<span class="bullet-list-before">&#61456;</span>' }, ".info-bubble": { before: '<span class="info-bubble-before"></span>' }, ".select-arrow": { before: '<span class="select-arrow-before"></span>', after: '<span class="select-arrow-after"></span>' }, ".with-left-arrow, .with-right-arrow, .tabs > li > a": { after: '<span class="with-arrow-after"></span>' }, "#menu": { before: '<span id="menu-before"></span>', after: '<span id="menu-after"></span>' }, ".number-up, .number-down": { after: '<span class="number-after"></span>' } }, s = this; this.findIn(t, n, "ul, li, dd, p, fieldset, .fieldset, button, .button, input, .input-info, .field-drop, .select, .loader").filter(":last-child").addClass("last-child"); e.each(i, function (e, r) { var i = s.findIn(t, n, e); if (i.length > 0) { if (r.before) { i.prepend(r.before) } if (r.after) { i.append(r.after) } } }); var o = this.findIn(t, n, ".button-icon"); o.not(".right-side").parent().css("padding-left", "0px").css("border-left", "0"); o.filter(".right-side").before("  ").parent().css("padding-right", "0px").css("border-right", "0"); var u = this.findIn(t, n, ".input").children(".button").not(".compact"); u.each(function (t) { if (!this.previousSibling) { e(this).parent().css("padding-left", "0px") } else if (!this.nextSibling) { e(this).parent().css("padding-right", "0px") } }); this.findIn(t, n, ".icon > img, .stack, .controls > :first-child").before('<span class="vert-align"> </span>') } if (e.template.ie8) { this.findIn(t, n, "ul, li, dd, p, fieldset, .fieldset, button, .button, input, .input-info, .field-drop, .select, .loader").filter(":last-child").addClass("last-child"); this.findIn(t, n, '[class^="icon-"],[class*=" icon-"]').each(function (t) { var n = e(this); if (n.is(":empty")) { n.addClass("font-icon-empty") } }) } return this }); e.template.addClearFunction(function (t, n) { var r = this; if (t) { r.filter(".replacement").each(function (t) { var n = e(this).data("replaced"); if (n) { r = r.add(n) } }) } r.findIn(t, n, ".tracking").stopTracking().remove(); r.findIn(t, n, ".tracked").getTrackers().stopTracking().remove(); r.findIn(t, n, ".withClearFunctions").each(function (t) { var n = this, r = e(n), i = r.data("clearFunctions") || []; e.each(i, function (e) { this.apply(n) }); r.removeClass("withClearFunctions").removeData("clearFunctions") }); return r }); i.on("resize", function () { if (!c && e.isReady) { c = setTimeout(T, 40) } }).on("orientationchange", T); s.on("respond-ready", function () { x(true) }); e.template.init = function () { var r = e("#menu"), u = e("#menu-content"), a = false, f; if (b) { return } b = true; x(false); o.applySetup(); s.trigger("init-queries"); s.trigger("enter-query-" + e.template.mediaQuery.name); e("#open-menu").on("touchend click", function (t) { t.preventDefault(); if (!e.template.processTouchClick(this, t)) { return } o.removeClass("shortcuts-open"); o.toggleClass(e.template.mediaQuery.is("desktop") || e.template.mediaQuery.is("tablet-landscape") ? "menu-hidden" : "menu-open"); if (e.template.mediaQuery.is("mobile") && o.hasClass("menu-open") && o.hasClass("fixed-title-bar")) { a = o.scrollTop(); o.removeClass("fixed-title-bar"); o.scrollTop(0) } else if (a !== false) { if (e.template.mediaQuery.is("mobile")) { o.scrollTop(a) } a = false; o.addClass("fixed-title-bar") } f() }); o.children().on("click", function (t) { if (o.hasClass("menu-open") && !e(t.target).closest("#open-menu, #menu").length) { if (a !== false) { if (e.template.mediaQuery.is("mobile")) { o.scrollTop(a) } a = false; o.addClass("fixed-title-bar") } o.removeClass("menu-open") } }); e("#open-shortcuts").on("touchend click", function (t) { t.preventDefault(); if (!e.template.processTouchClick(this, t)) { return } if (a !== false && o.hasClass("menu-open")) { if (e.template.mediaQuery.is("mobile")) { o.scrollTop(a) } a = false; o.addClass("fixed-title-bar") } o.removeClass("menu-open").toggleClass("shortcuts-open") }); f = function () { if (!o.hasClass("menu-open") || !e.template.mediaQuery.is("tablet-portrait")) { u.css("max-height", ""); return } var t = 0; u.siblings().each(function (n) { t += e(this).outerHeight() }); u.css("max-height", Math.round(.9 * e.template.viewportHeight) - (r.outerHeight() - r.height()) - t + "px") }; f(); i.on("normalized-resize", f); if (e.fn.customScroll) { var l = false, c = false, h = function () { if (e.template.mediaQuery.isSmallerThan("tablet-portrait")) { if (l) { r.removeCustomScroll(); l = false } if (c) { u.removeCustomScroll(); c = false } } else if (e.template.mediaQuery.is("tablet-portrait")) { if (l) { r.removeCustomScroll(); l = false } if (!c) { u.customScroll(); c = true } } else { if (c) { u.removeCustomScroll(); c = false } if (!l) { r.customScroll(); l = true } } }; h(); s.on("change-query", h) } if ("standalone" in t.navigator && t.navigator.standalone) { s.on("click", "body", function (t) { var r = e(t.target).closest("a"), i; if (!r.length) { return } if (t.isDefaultPrevented()) { return } i = r.attr("href"); if (!i || i.indexOf("#") === 0) { return } if (r.hasClass("navigable-ajax") || r.hasClass("navigable-ajax-loaded")) { return } if (!/^[a-z+\.\-]+:/i.test(i) || i.indexOf(n.location.protocol + "//" + n.location.host) === 0) { t.preventDefault(); n.location.href = i } }) } }; s.ready(function () { e.template.init() }); s.on("click", ".close", function (t) { var n = e(this), r = n.parent(); t.preventDefault(); n.remove(); r.addClass("closing").fadeAndRemove().trigger("close") }); if (Modernizr.touch) { s.on("touchend", ".info-spot", function (t) { if (!e.template.processTouchClick(this, t)) { return } var n = e(this), r = n.children(".info-bubble").html(); if (r && r.length > 0) { t.preventDefault(); if (e.modal) { e.modal.alert(r) } else { alert(r) } } }) } else { s.on("mouseenter", ".info-spot", function (t) { var n = e(this), r = n.children(".info-bubble"); if (n.hasClass("on-left")) { if (r.offset().left < 0) { n.removeClass("on-left").data("info-spot-reverse-x", true) } } else { if (r.offset().left + r.outerWidth() > e.template.viewportWidth) { n.addClass("on-left").data("info-spot-reverse-x", true) } } if (n.hasClass("on-top")) { if (r.offset().top < s.scrollTop()) { n.removeClass("on-top").data("info-spot-reverse-y", true) } } else { if (r.offset().top + r.outerHeight() > s.scrollTop() + e.template.viewportHeight) { n.addClass("on-top").data("info-spot-reverse-y", true) } } }).on("mouseleave", ".info-spot", function (t) { var n = e(this); if (n.data("info-spot-reverse-x")) { n.toggleClass("on-left"); n.removeData("info-spot-reverse-x") } if (n.data("info-spot-reverse-y")) { n.toggleClass("on-top"); n.removeData("info-spot-reverse-y") } }) } if (!Modernizr.pointerevents) { s.on("click mouseover", ".no-pointer-events", function (t) { this.style.display = "none"; var r = t.pageX, i = t.pageY, s = n.elementFromPoint(r, i); this.style.display = ""; t.stopPropagation(); t.preventDefault(); e(s).trigger(t.type) }) } e.fn.trackElement = function (t, n) { t = t.eq(0).addClass("tracked"); if (!n) { n = function (t) { e(this).offset(t.offset()) } } var r = t[0], i = t.data("tracking-elements") || []; this.css({ position: "absolute" }).addClass("tracking").each(function (s) { var o = e(this), u = o.data("tracked-element"); if (u && u !== r) { o.stopTracking(); u = null } if (!u) { o.data("tracked-element", r); i.push({ element: this, func: n }); n.call(this, t) } }); t.data("tracking-elements", i); return this }; e.fn.stopTracking = function (t) { this.each(function () { var n = e(this), r = n.data("tracked-element"), i, s, o; if (r) { i = e(r); s = i.data("tracking-elements") || []; for (o = 0; o < s.length; ++o) { if (s[o].element === this) { s.splice(o, 1); --o } } if (s.length === 0) { i.removeClass("tracked").removeData("tracking-elements") } else { i.data("tracking-elements", s) } n.removeClass("tracking").removeData("tracked-element"); n.css({ position: "" }); if (t) { n.css({ top: "", left: "" }) } } }); return this }; e.fn.refreshTrackedElements = function () { this.filter(".tracked").each(function (t) { var n = e(this); e.each(n.data("tracking-elements") || [], function (t) { e(this.element).stop(true, true); if (this.func) { this.func.call(this.element, n) } }) }); return this }; i.scroll(function () { o.refreshInnerTrackedElements() }); e.fn.refreshInnerTrackedElements = function () { this.find(".tracked").each(function (t) { var n = e(this); e.each(n.data("tracking-elements") || [], function (t) { e(this.element).stop(true, true); if (this.func) { this.func.call(this.element, n) } }) }); return this }; e.fn.getTrackers = function () { var t = []; e.each(e(this).data("tracking-elements") || [], function (e) { t.push(this.element) }); return e(t) }; e.fn.foldAndRemove = function (t, n) { e(this).slideUp(t, function () { if (n) { n.apply(this) } e(this).remove() }); return this }; e.fn.fadeAndRemove = function (t, n) { this.animate({ opacity: 0 }, { duration: t, complete: function () { var r = e(this).trigger("endfade"); if (r.css("position") == "absolute") { if (n) { n.apply(this) } r.remove() } else { r.slideUp(t, function () { if (n) { n.apply(this) } r.remove() }) } } }); return this }; e.fn.shake = function (t, n) { t = t || 15; this.each(function () { var r = e(this), i = r.parseCSSValue("margin-left"), s = r.parseCSSValue("margin-right"), o = [t, Math.round(t * .8), Math.round(t * .6), Math.round(t * .4), Math.round(t * .2)], u = [[i - o[0], s + o[0]], [i + o[1], s - o[1]], [i - o[2], s + o[2]], [i + o[3], s - o[3]], [i - o[4], s + o[4]], [i, i]]; e.each(u, function (t) { var i = { duration: t === 0 ? 40 : 80 }; if (t === 5) { i.complete = function () { e(this).css({ marginLeft: "", marginRight: "" }); if (n) { n.apply(this) } } } r.animate({ marginLeft: this[0] + "px", marginRight: this[1] + "px" }, i) }) }); return this }; if (!location.hash) { t.scrollTo(0, 1); var N = 1, C = function () { return t.pageYOffset || n.compatMode === "CSS1Compat" && n.documentElement.scrollTop || n.body.scrollTop || 0 }, k = setInterval(function () { if (n.body) { clearInterval(k); N = C(); t.scrollTo(0, N === 1 ? 0 : 1) } }, 15); i.on("load", function () { setTimeout(function () { if (C() < 20) { t.scrollTo(0, N === 1 ? 0 : 1) } }, 0) }) } if (e.easing.easeOutQuad === r) { e.easing.jswing = e.easing.swing; e.extend(e.easing, { def: "easeOutQuad", swing: function (t, n, r, i, s) { return e.easing[e.easing.def](t, n, r, i, s) }, easeInQuad: function (e, t, n, r, i) { return r * (t /= i) * t + n }, easeOutQuad: function (e, t, n, r, i) { return -r * (t /= i) * (t - 2) + n }, easeInOutQuad: function (e, t, n, r, i) { if ((t /= i / 2) < 1) { return r / 2 * t * t + n } return -r / 2 * (--t * (t - 2) - 1) + n } }) } var L = ["DOMMouseScroll", "mousewheel"]; e.event.special.mousewheel = { setup: function () { if (this.addEventListener) { for (var e = L.length; e;) { this.addEventListener(L[--e], A, false) } } else { this.onmousewheel = A } }, teardown: function () { if (this.removeEventListener) { for (var e = L.length; e;) { this.removeEventListener(L[--e], A, false) } } else { this.onmousewheel = null } } }; e.fn.extend({ mousewheel: function (e) { return e ? this.on("mousewheel", e) : this.trigger("mousewheel") }, unmousewheel: function (e) { return this.off("mousewheel", e) } }) })(this.jQuery, window, document)