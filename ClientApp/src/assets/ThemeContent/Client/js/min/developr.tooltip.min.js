(function (e, t, n) { function u() { if (!o) { o = e('<div id="tooltips"></div>').appendTo(n.body) } return o } function f() { if (!a) { a = e('<div id="tooltips-over"></div>').appendTo(n.body) } return a } function l(t) { return t instanceof jQuery || typeof t === "function" || typeof t === "string" && e.trim(t).length > 0 } function c(t, n) { var r, i; if (l(t)) { return t } t = n.data("tooltip-content"); if (l(t)) { if (n[0].title && n[0].title.length) { n[0].title = ""; n.data("tooltip-title", { value: t, element: n[0] }) } return t } r = n.data("tooltip-title"); if (r) { return r.value } if (n[0].title && e.trim(n[0].title).length > 0) { t = n[0].title; n[0].title = ""; n.data("tooltip-title", { value: t, element: n[0] }); return t } i = n.children(); if (i.length === 1 && i[0].title && e.trim(i[0].title).length > 0) { t = i[0].title; i[0].title = ""; n.data("tooltip-title", { value: t, element: i[0] }); return t } return false } function h(e) { var t = e.data("tooltip-title"); if (t) { t.element.title = t.value; e.removeData("tooltip-title") } } var r = e(t), i = e(n), s = false; var o = false; var a = false; e.fn.tooltip = function (t, n) { var r = e.extend({}, e.fn.tooltip.defaults, n), o = false; if (typeof t === "object" && !(t instanceof jQuery)) { n = t; t = "" } if (!n || typeof n !== "object") { o = true; n = {} } this.each(function (a) { var l = e(this), p = l.data("replaced"), d = l.data("tooltip-options") || (p ? p.data("tooltip-options") || {} : {}), v = l.data("tooltip-awaiting"), m = false, g, y, b; if (!e.isReady || !n.ignoreDelay && (n.delay > 0 || d.delay > 0)) { var w = d.delay || n.delay || 40, E = n, S, x; t = c(t, l); if (v) { if (v.abort() === false) { return } if (o) { E = e.extend({}, v.options) } } if (E.removeOnMouseleave) { g = function (e) { x() }; l.on("mouseleave", g) } if (E.removeOnBlur) { y = function (e) { x() }; i.on("click touchend", y) } x = function (e, t) { if (E.onAbort) { if (L.onAbort.call(O[0], l) === false && !e) { return false } } clearTimeout(S); l.removeData("tooltip-awaiting"); if (g) { l.off("mouseleave", g) } if (y) { i.off("click touchend", y) } if (!t) { h(l) } }; l.data("tooltip-awaiting", { options: E, abort: x }); S = setTimeout(function () { x(false, true); l.tooltip(t, e.extend(E, { ignoreDelay: true })) }, w) } else { var T = l.data("tooltip"), N = {}, C = false, k = {}, L, A, O, M, _, D, P = false, H, B, j, F, I, q, R, U; if (T) { if (T.settings.lock && (o || !n.fromAjax)) { return } if (T.removeTooltip(false, true) === false) { return } if (o) { N = T.settings } C = true } if (v) { if (v.options.lock) { return } if (v.abort() === false) { return } if (o) { k = v.options } } if (!n.position && !N.position && !k.position) { _ = l.closest(".tooltip-top, .tooltip-right, .tooltip-bottom, .tooltip-left"); if (_.length > 0) { k.position = /tooltip-(top|right|bottom|left)/.exec(_[0].className)[1] } } L = e.extend({}, r, d, N, k); if (L.ajax && !L.fromAjax) { if (typeof L.ajax === "object") { m = L.ajax } else { m = e.ajax(L.ajax, L.ajaxOptions) } L.fromAjax = true; m.done(function (e) { var t = l.data("tooltip"); if (t) { l.tooltip(e, L) } }); m.fail(function () { var e = l.data("tooltip"); if (e) { l.tooltip(L.ajaxErrorMessage, L) } }) } if (typeof t === "function") { t = t.apply(this) } t = c(t, l); if (t === false) { return } if (t instanceof jQuery) { D = t; t = "" } if (L.local) { A = l.parent(); while (!A.is("body") && A.css("display") !== "block") { A = A.parent() } if (A.css("position") !== "absolute" && A.css("position") !== "fixed") { A.addClass("relative") } } else { A = l.closest(".notification, .modal").length > 0 ? f() : u() } animateDistance = L.animate && !C ? L.animateMove : 0; if (L.exclusive && s) { if (s.removeTooltip(false, true) === false) { return } } B = L.noPointerEvents ? " no-pointer-events" : ""; O = e('<div class="message tooltip ' + L.classes.join(" ") + B + '">' + t + "</div>").appendTo(A).data("tooltip-target", l); if (D) { if (!D.is(":visible")) { P = true; D.show() } if (D.parent().length > 0) { H = e('<span style="display:none"></span>').insertBefore(D); D.detach() } O.append(D) } switch (L.position.toLowerCase()) { case "right": M = e('<span class="block-arrow left"><span></span></span>').appendTo(O); j = M.parseCSSValue("margin-top"); break; case "bottom": M = e('<span class="block-arrow top"><span></span></span>').appendTo(O); j = M.parseCSSValue("margin-left"); break; case "left": M = e('<span class="block-arrow right"><span></span></span>').appendTo(O); j = M.parseCSSValue("margin-top"); break; default: M = e('<span class="block-arrow"><span></span></span>').appendTo(O); j = M.parseCSSValue("margin-left"); break } q = function () { var t = l.offset(), n = l.outerWidth(), r = l.outerHeight(), s = O.outerWidth(), o = O.outerHeight(), u = e.template.viewportWidth, a = e.template.viewportHeight, f, c, h, p, d = 0; switch (L.position) { case "right": f = t.top + Math.round(r / 2) - Math.round(o / 2); c = t.left + n + L.spacing; if (c + s > u - L.screenPadding) { c = t.left - s - L.spacing; animateDistance *= -1; M.removeClass("left").addClass("right") } else { M.removeClass("right").addClass("left") } if (f < L.screenPadding + i.scrollTop()) { h = L.screenPadding + i.scrollTop() - f; d = -Math.min(h, Math.round(o / 2) - L.arrowMargin); f += h } else if (f + o > i.scrollTop() + a - L.screenPadding) { h = i.scrollTop() + a - L.screenPadding - o - f; d = Math.min(-h, Math.round(o / 2) - L.arrowMargin); c += h } c -= animateDistance; break; case "bottom": f = t.top + r + L.spacing; c = t.left + Math.round(n / 2) - Math.round(s / 2); if (c < L.screenPadding) { h = L.screenPadding - c; d = -Math.min(h, Math.round(s / 2) - L.arrowMargin); c += h } else if (c + s > u - L.screenPadding) { h = u - L.screenPadding - s - c; d = Math.min(-h, Math.round(s / 2) - L.arrowMargin); c += h } if (f + o > a - L.screenPadding + i.scrollTop()) { f = t.top - o - L.spacing; animateDistance *= -1; M.removeClass("top").addClass("bottom") } else { M.removeClass("bottom").addClass("top") } f -= animateDistance; break; case "left": f = t.top + Math.round(r / 2) - Math.round(o / 2); c = t.left - s - L.spacing; if (c < L.screenPadding + i.scrollLeft()) { c = t.left + n + L.spacing; animateDistance *= -1; M.removeClass("right").addClass("left") } else { M.removeClass("left").addClass("right") } if (f < L.screenPadding + i.scrollTop()) { h = L.screenPadding + i.scrollTop() - f; d = -Math.min(h, Math.round(o / 2) - L.arrowMargin); f += h } else if (f + o > i.scrollTop() + a - L.screenPadding) { h = i.scrollTop() + a - L.screenPadding - o - f; d = Math.min(-h, Math.round(o / 2) - L.arrowMargin); c += h } c += animateDistance; break; default: f = t.top - o - L.spacing; c = t.left + Math.round(n / 2) - Math.round(s / 2); if (c < L.screenPadding) { h = L.screenPadding - c; d = -Math.min(h, Math.round(s / 2) - L.arrowMargin); c += h } else if (c + s > u - L.screenPadding) { h = u - L.screenPadding - s - c; d = Math.min(-h, Math.round(s / 2) - L.arrowMargin); c += h } if (f < L.screenPadding + i.scrollTop()) { f = t.top + r + L.spacing; animateDistance *= -1; M.removeClass("bottom").addClass("top") } else { M.removeClass("top").addClass("bottom") } f += animateDistance; break } if (L.local) { p = A.offset(); f -= p.top; c -= p.left; O.css({ top: f + "px", left: c + "px" }) } else { O.offset({ top: f, left: c }) } if (L.position === "left" || L.position === "right") { M.css("margin-top", d === 0 ? "" : j + d + "px") } else { M.css("margin-left", d === 0 ? "" : j + d + "px") } }; O.trackElement(l, q); if (L.animate) { F = { opacity: 1 }; I = { opacity: 0 }; if (animateDistance !== 0) { switch (L.position) { case "right": F.left = "+=" + animateDistance + "px"; I.left = "-=" + animateDistance + "px"; break; case "bottom": F.top = "+=" + animateDistance + "px"; I.top = "-=" + animateDistance + "px"; break; case "left": F.left = "-=" + animateDistance + "px"; I.left = "+=" + animateDistance + "px"; break; default: F.top = "-=" + animateDistance + "px"; I.top = "+=" + animateDistance + "px"; break } animateDistance = 0 } if (!C) { O.css({ opacity: 0 }).animate(F, L.animateSpeed) } } R = function (e, t) { if (L.onRemove) { if (L.onRemove.call(O[0], l) === false && !e) { return false } } if (g) { l.off("mouseleave", g) } if (y) { i.off("click touchend", y) } if (b) { O.off("click touchend", b) } l.removeData("tooltip"); if (L.exclusive) { s = false } if (L.animate && !t) { O.addClass("tooltip-removed").animate(I, L.animateSpeed, U) } else { U() } return true }; U = function () { h(l); if (H) { D.detach().insertAfter(H); H.remove() } if (P) { D.hide() } O.remove() }; l.data("tooltip", { element: O, settings: L, updatePosition: q, removeTooltip: R }); if (L.exclusive) { s = { removeTooltip: R, dom: D } } if (L.removeOnMouseleave) { g = function (e) { R() }; l.on("mouseleave", g) } if (L.removeOnBlur) { y = function (t) { if (e(t.target).closest(O[0]).length) { return } if (t.isDefaultPrevented()) { return } R() }; i.on("click touchend", y) } if (L.removeOnClick && !L.noPointerEvents) { b = function (e) { R() }; O.on("click touchend", b) } if (L.onShow) { L.onShow.call(O[0], l) } } }); return this }; e.fn.removeTooltip = function (t, n) { this.each(function (r) { var i = e(this), s = i.data("tooltip"), o = i.data("tooltip-awaiting"), u; if (s) { if (s.removeTooltip(t, n) === false) { return } } if (o) { if (o.abort(t) === false) { return } } }); return this }; e.fn.menuTooltip = function (t, n, r) { r = r || "click"; this.on(r, function (r) { r.preventDefault(); r.stopPropagation(); e(this).tooltip(t, e.extend({ lock: true, exclusive: true, removeOnBlur: true, noPointerEvents: false }, n)) }); return this }; e.fn.tooltip.defaults = { position: "top", local: false, spacing: 10, classes: [], noPointerEvents: true, lock: false, exclusive: false, animate: true, animateMove: 10, animateSpeed: "fast", delay: 0, ajax: null, ajaxOptions: {}, ajaxErrorMessage: "Error while loading data", screenPadding: 10, arrowMargin: 10, removeOnMouseleave: false, removeOnBlur: false, removeOnClick: false, onShow: null, onRemove: null, onAbort: null }; if (!Modernizr || !Modernizr.touch) { i.on("mouseenter", ".with-tooltip, .children-tooltip > *", function (t) { var n = e(this), r = n.parent(), i = { delay: 100, removeOnMouseleave: true }; if (r.hasClass("children-tooltip")) { i = e.extend(i, r.data("tooltip-options")) } n.tooltip(i) }) } })(jQuery, window, document)