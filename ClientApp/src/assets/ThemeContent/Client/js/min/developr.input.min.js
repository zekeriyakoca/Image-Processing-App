(function (e, t, n, r) { function o(t) { var n = t.data("number-options"), r; if (!n || !n.formatted) { n = e.extend({}, e.fn.setNumber.defaults, n); if (typeof n.min !== "number") { n.min = null } if (typeof n.max !== "number") { n.max = null } if (n.min !== null && n.max !== null) { if (n.min > n.max) { r = n.max; n.max = n.min; n.min = r } } if (!n.precision) { n.precision = 1 } n.formatted = true; t.data("number-options", n) } return n } function u(e, t) { if (typeof e === "string") { if (t.thousandsSep.length) { e = e.replace(t.thousandsSep, "") } if (t.decimalPoint !== ".") { e = e.replace(t.decimalPoint, ".") } e = parseFloat(e); if (isNaN(e)) { e = 0 } } return e } function a(e, t) { var n, r; e = u(e, t); e = Math.round(e / t.precision) * t.precision; if (t.precision < 1) { r = t.precision.toString().length - 2; e = Math.round(e * Math.pow(10, r)) / Math.pow(10, r) } if (t.min !== null) { e = Math.max(e, t.min) } if (t.max !== null) { e = Math.min(e, t.max) } if (t.thousandsSep.length || t.decimalPoint !== ".") { n = e.toString().split("."); if (t.thousandsSep.length && n[0].length > 3) { n[0] = n[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, t.thousandsSep) } return n.join(t.decimalPoint) } return e } function f(e) { var t = e[0].nodeName.toLowerCase(); return t === "input" || t === "select" || t === "textarea" || t === "button" } function l(t, r, o) { var u = t.data("replaced"), a = t.data("select-settings") || {}, f, l, c, p, v, m, g, y, b, w, E, S, x = false, T = false, N = new Date, C = N.getTime(), k, L, A, O; if (o) { o.preventDefault() } if (t.closest(".disabled").length > 0 || u && u.is(":disabled")) { return } if (u && !t.hasClass("select-styled-list")) { return } if (t.hasClass("select-cloned")) { return } p = t.parents(".custom-scroll"); if (t.closest(".modal, .notification, .tooltip").length) { t.addClass("over") } else { t.removeClass("over") } k = e.template.disableDOMWatch(); l = t.clone().addClass("select-clone").css("width", t.width() + "px"); l[0].tabIndex = -1; l.children("select").remove(); l.appendTo(n.body).trackElement(t); setTimeout(function () { t.refreshTrackedElements() }, 1); t.data("clone", l); t.data("select-hiding", true).addClass("select-cloned"); setTimeout(function () { t.removeData("select-hiding") }, 40); f = l.children(".drop-down"); if (u) { l.data("replaced", u); h(l, u); A = function (e) { h(l, u); d(l, u, t.data("select-settings")) }; u.on("change silent-change update-select-list", A) } if (!t.is(".glossy")) { c = t.closest(".glossy"); if (c.length > 0) { l.addClass("glossy") } } if (!t.is(".compact")) { c = t.parent(".compact"); if (c.length > 0) { l.addClass("compact") } } if (k) { e.template.enableDOMWatch() } l.removeClass("reversed").addClass("open"); if (u) { f.on("touchend click", function (e) { if (e.type === "touchend" && f.data("touch-scrolling")) { return } e.stopPropagation() }) } if (!l.hasClass("auto-open") && (a.searchField === true || a.searchField === null && f.children("a, span").length >= a.searchIfMoreThan)) { S = e('<div class="select-search-wrapper"></div>').appendTo(l); x = e('<input type="text" class="select-search" value="" placeholder="' + a.searchText + '" autocomplete="off">').appendTo(S); x.on("keydown", function (e) { e.stopPropagation() }).on("focus", function (e) { T = true }).on("blur", function (e) { T = false }).keyup(function (n) { var r = e.trim(x.val()), i = e.template.keys, s, o, a, l, c, h; n.stopPropagation(); switch (n.keyCode) { case i.up: o = f.children("a, span").not(".disabled").not(":hidden"); l = o.filter(".selected:first"); if (l.length === 0) { c = o.last() } else { c = l.prevAll("a, span").not(".disabled").not(":hidden").first() } if (c.length > 0) { l.removeClass("selected"); c.addClass("selected"); if (e.fn.scrollToReveal) { c.scrollToReveal() } if (u) { h = c.data("select-value"); if (h) { if (u[0].multiple) { u.find("option:selected").prop("selected", false) } h.selected = true; u.trigger("change") } } } break; case i.down: o = f.children("a, span").not(".disabled").not(":hidden"); l = o.filter(".selected:last"); if (l.length === 0) { c = o.first() } else { c = l.nextAll("a, span").not(".disabled").not(":hidden").first() } if (c.length > 0) { l.removeClass("selected"); c.addClass("selected"); if (e.fn.scrollToReveal) { c.scrollToReveal() } if (u) { h = c.data("select-value"); if (h) { if (u[0].multiple) { u.find("option:selected").prop("selected", false) } h.selected = true; u.trigger("change") } } } break; case i.enter: case i.space: t.trigger("close-select"); break; default: if (r.length === 0) { f.children("a, span").show() } else { s = new RegExp(r.toLowerCase(), "g"); f.children("a, span").each(function (t) { var n = e(this); if (e.trim(n.text().toLowerCase()).match(s)) { n.show() } else { n.hide() } }) } break } }) } if (e.fn.customScroll && !f.hasCustomScroll()) { f.customScroll({ padding: 4, showOnHover: false, usePadding: true, continuousWheelScroll: false, continuousTouchScroll: false }) } m = f.removeClass("reversed").position().top; y = f.outerHeight(); w = y - f.height(); L = function () { var n; y = f.css("max-height", "").outerHeight(); v = l.offset().top - i.scrollTop(); g = i.height(); if (v + m + y > g) { if (v - m - y > 0) { l.addClass("reversed") } else { if (v > g * .6) { l.addClass("reversed"); E = v } else { l.removeClass("reversed"); E = g - v - m } E -= w; f.css({ maxHeight: E - 10 + "px" }); n = t.data("scrollPosition"); if (n) { f[0].scrollTop = n } } } else { l.removeClass("reversed") } t.removeData("scrollPosition"); if (e.fn.customScroll) { f.refreshCustomScroll() } }; O = function (n) { var o = e(n.target); if ((n.type === "click" || n.type === "touchend") && (o.closest(f).length || S && o.closest(S).length)) { return } else if (n.type === "scroll" && T) { L(); return } i.off("resize", L); s.off("scroll", O); p.off("scroll", O); if (r && !e.template.touchOs) { l.off("mouseleave", O) } else { s.off("touchend click", O) } t.off("close-select", O); l.off("close-select", O); if (u) { u.off("change silent-change update-select-list", A) } if (x) { f.children("a, span").show() } t.data("scrollPosition", f[0].scrollTop); k = e.template.disableDOMWatch(); l.detach(); t.removeData("clone").removeClass("select-cloned"); if (k) { e.template.enableDOMWatch() } }; L(); i.on("resize", L); s.on("scroll", O); p.on("scroll", O); if (r && !e.template.touchOs) { l.on("mouseleave", O) } else { s.on("touchend click", O) } l.on("close-select", O); t.on("close-select", O) } function c(e, t, n) { if (t.style.width !== "" && t.style.width != "auto") { if (!e.hasClass("fixedWidth")) { e.addClass("fixedWidth"); if (e.hasClass("selectMultiple")) { n.css("width", t.style.width) } } } else { if (e.hasClass("fixedWidth")) { e.removeClass("fixedWidth"); if (e.hasClass("selectMultiple")) { n.css("width", "") } } } } function h(t, n) { var r = t.children(".drop-down"), i = t.hasClass("check-list") ? '<span class="check"></span>' : "", s, o; if (r.length > 0 && n) { o = e.template.disableDOMWatch(); c(t, n[0], r); s = r.children("span, strong"); n.find("option, optgroup").each(function (t) { var n = [], o = this, u = this.nodeName.toLowerCase() === "option", a = u ? "span" : "strong", f = u ? e(this).text() : this.label, l = false, c; if (f.length === 0) { if (!u) { return } f = " " } if (s.length) { s.each(function () { var t = e(this); if (t.data("select-value") === o) { l = t; s = s.not(this); return false } }) } if (l) { l.detach().appendTo(r); l.html(i + f); l[this.selected ? "addClass" : "removeClass"]("selected"); l[this.parentNode.nodeName.toLowerCase() === "optgroup" ? "addClass" : "removeClass"]("in-group"); l[this.disabled ? "addClass" : "removeClass"]("disabled"); return } if (u) { if (this.selected) { n.push("selected") } if (this.parentNode.nodeName.toLowerCase() === "optgroup") { n.push("in-group") } if (this.disabled) { n.push("disabled") } } c = e("<" + a + (n.length > 0 ? ' class="' + n.join(" ") + '"' : "") + ">" + i + f + "</" + a + ">").appendTo(r).data("select-value", this); if (u && !this.disabled) { c.on("touchend click", p) } }); if (s.length) { s.remove() } if (o) { e.template.enableDOMWatch() } } } function p(t) { var n = e(this), i = n.parent(), s = i.parent(), o = s.data("replaced"), u = n.data("select-value"), a = o[0].multiple, f, l; if (i.data("touch-scrolling")) { return } if (!e.template.processTouchClick(this, t)) { t.stopPropagation(); return } if (o && u) { if (a && (e.template.touchOs || t.ctrlKey || t.metaKey || s.hasClass("easy-multiple-selection"))) { f = n.hasClass("selected"); if (!s.hasClass("allow-empty")) { if (!f || f && (l = o.val()) && l.length > 1) { u.selected = !f; o.trigger("change") } } else { u.selected = !f; o.trigger("change") } } else { l = o.val(); if (a && (l === null || l === r)) { l = [] } if (a && (l.length !== 1 || l[0] !== u.value) || !a && l !== u.value) { o.val(u.value).trigger("change") } if (!s.hasClass("selectMultiple")) { s.trigger("close-select") } } } } function d(t, n, r) { var i = n.find(":selected"), s = t.children(".select-value"), o = [], u; if (t.hasClass("selectMultiple")) { return } if (r.staticValue) { s.html(r.staticValue); return } if (i.length === 0) { u = n.data("no-value-text") || r.noValueText; if (!u || u.length === 0) { u = " " } s.addClass("alt").html(u) } else { i.each(function (t) { o.push(e(this).text()) }); if (n[0].multiple) { switch (o.length) { case 1: v(s, o, n.data("single-value-text"), r.singleValueText); break; case n[0].options.length: v(s, o, n.data("all-values-text"), r.allValuesText); break; default: v(s, o, n.data("multiple-values-text"), r.multipleValuesText); break } } else { s.text(o.length > 0 ? o.join(", ") : " ") } } } function v(e, t, n, r) { if (!n) { n = r } if (typeof n === "string" && n.length === 0) { n = " " } if (typeof n === "boolean") { e.removeClass("alt").html(t.length > 0 ? t.join(", ") : " ") } else { e.addClass("alt").html(n.replace("%d", t.length)) } } function m(e) { if (e[0].multiple) { val = e.val(); if (val && val.length > 1) { selectedIndex = false } else { selectedIndex = e[0].selectedIndex } } else { selectedIndex = e[0].selectedIndex } if (selectedIndex === null || selectedIndex === r) { selectedIndex = -1 } return selectedIndex } function g() { var t = e(this), n = t.data("replacement"), r; if (!n) { return } r = n.data("checkableBlurFunction"); if (r) { r() } this.tabIndex = select[0].tabIndex; t.detach().insertBefore(n).css("display", ""); this.className = t.data("initial-classes"); t.removeData("initial-classes"); t.removeData("replacement"); n.remove() } function y() { var t = e(this), n = t.data("replacement"); if (!n) { return } if (n.hasClass("select-cloned")) { n.trigger("close-select") } if (n.hasClass("focus")) { n.blur() } if (n[0].tabIndex > 0) { this.tabIndex = n[0].tabIndex } t.detach().insertBefore(n).css("display", ""); this.className = t.data("initial-classes"); t.removeData("initial-classes"); t.removeData("replacement"); if (e.fn.customScroll) { n.children(".drop-down").removeCustomScroll() } n.remove() } function b() { var t = e(this), n = t.parent(); if (!n.hasClass("file")) { return } t.detach().insertBefore(n); n.remove() } var i = e(t), s = e(n); e.fn.styleCheckable = function (t) { var n = e.extend({}, e.fn.styleCheckable.defaults, t); return this.each(function (t) { var r = e(this), i = e.extend({}, n, r.data("checkable-options")), s = this.checked ? " checked" : "", o = this.disabled ? " disabled" : "", u = r.data("replacement"), a = this.title && this.title.length > 0 ? ' title="' + this.title + '"' : "", f = this.tabIndex > 0 ? this.tabIndex : 0, l; if (u) { return } l = e.template.disableDOMWatch(); if (r.hasClass("switch")) { u = e('<span class="' + this.className.replace(/validate\[.*\]/, "") + s + o + ' replacement"' + a + ' tabindex="' + f + '">' + '<span class="switch-on"><span>' + (r.data("text-on") || i.textOn) + "</span></span>" + '<span class="switch-off"><span>' + (r.data("text-off") || i.textOff) + "</span></span>" + '<span class="switch-button"></span>' + "</span>") } else { u = e('<span class="' + this.className.replace(/validate\[.*\]/, "") + s + o + ' replacement"' + a + ' tabindex="' + f + '">' + '<span class="check-knob"></span>' + "</span>") } this.tabIndex = -1; u.insertAfter(r).data("replaced", r); r.data("replacement", u); r.addClearFunction(g); r.detach().appendTo(u).data("initial-classes", this.className); this.className = this.className.indexOf("validate[") > -1 ? this.className.match(/validate\[.*\]/)[0] : ""; if (l) { e.template.enableDOMWatch() } }) }; e.fn.styleCheckable.defaults = { textOn: "ON", textOff: "OFF" }; e.fn.styleSelect = function (t) { var n = e.extend({}, e.fn.styleSelect.defaults, t); return this.each(function (t) { var r = e(this), i = e.extend({}, n, r.data("select-options")), s = r.data("replacement"), o = this.disabled ? " disabled" : "", u = (this.multiple || r.hasClass("multiple")) && !r.hasClass("multiple-as-single"), a = r.attr("size") > 1, f = this.title && this.title.length > 0 ? ' title="' + this.title + '"' : "", l = this.tabIndex > 0 ? this.tabIndex : 0, p, d, m, g, b; if (s) { return } g = e.template.disableDOMWatch(); if (u) { p = e('<span class="' + this.className.replace(/validate\[.*\]/, "").replace(/(\s*)select(\s*)/, "$1selectMultiple$2") + o + ' replacement"' + f + ' tabindex="' + l + '">' + '<span class="drop-down"></span>' + "</span>").insertAfter(r).data("replaced", r); r.data("replacement", p); if (a && !r.getStyleString().match(/height\s*:\s*[0-9]+/i)) { d = p.children(".drop-down"); d.height(r.hasClass("check-list") ? this.size * 37 - 1 : this.size * 26); if (e.fn.customScroll) { d.customScroll({ padding: 4, showOnHover: false, usePadding: true }) } } h(p, r); r.on("change silent-change update-select-list", function (e) { h(p, r) }) } else { p = e('<span class="' + this.className.replace(/validate\[.*\]/, "") + o + ' replacement"' + f + ' tabindex="' + l + '">' + '<span class="select-value"></span>' + '<span class="select-arrow">' + (e.template.ie7 ? '<span class="select-arrow-before"></span><span class="select-arrow-after"></span>' : "") + "</span>" + '<span class="drop-down"></span>' + "</span>").insertAfter(r).data("replaced", r); b = []; r.find(":selected").each(function (t) { b.push(e(this).text()) }); if (i.staticValue) { p.children(".select-value").html(i.staticValue) } else if (this.multiple) { switch (b.length) { case 1: v(p.children(".select-value"), b, r.data("single-value-text"), i.singleValueText); break; case this.options.length: v(p.children(".select-value"), b, r.data("all-values-text"), i.allValuesText); break; default: v(p.children(".select-value"), b, r.data("multiple-values-text"), i.multipleValuesText); break } } else { p.children(".select-value").html(b.length > 0 ? b.pop() : " ") } r.data("replacement", p); c(p, this, p.children(".drop-down")) } this.tabIndex = -1; r.detach().prependTo(p).data("initial-classes", this.className); this.className = this.className.indexOf("validate[") > -1 ? this.className.match(/validate\[.*\]/)[0] : ""; r.addClearFunction(y); p.data("select-settings", i); if (u || this.multiple || i.styledList && (!e.template.touchOs || e.template.touchOs && (i.styledOnTouch === true || i.styledOnTouch === null && p.hasClass("check-list")))) { p.addClass("select-styled-list") } if (g) { e.template.enableDOMWatch() } }) }; e.fn.styleSelect.defaults = { styledList: true, styledOnTouch: null, openOnKeyDown: true, noValueText: "", staticValue: false, singleValueText: false, multipleValuesText: "%d selected", allValuesText: "All", searchField: null, searchIfMoreThan: 25, searchText: "Search" }; e.fn.styleFile = function (t) { var n = e.extend({}, e.fn.styleFile.defaults, t); return this.each(function (t) { var r = e(this).addClass("file"), i = e.extend({}, n, r.data("file-options")), s = r.hasClass("black-input") || r.closest(".black-inputs").length > 0 ? " anthracite-gradient" : "", o = !!this.multiple, u = this.disabled ? " disabled" : "", a; if (r.parent().hasClass("file")) { return } a = e.template.disableDOMWatch(); styling = e('<span class="input ' + this.className.replace(/validate\[.*\]/, "") + u + '">' + '<span class="file-text">' + r.val() + "</span>" + '<span class="button compact' + s + '">' + (o ? i.textMultiple : i.textSingle) + "</span>" + "</span>"); styling.insertAfter(r); r.addClearFunction(b); r.detach().appendTo(styling); if (a) { e.template.enableDOMWatch() } }) }; e.fn.styleFile.defaults = { textSingle: "Select file", textMultiple: "Select files" }; e.fn.setNumber = function (t) { return this.each(function (n) { var r; if (this.nodeName.toLowerCase() === "input") { r = e(this) } else { r = e(this).children("input:first"); if (r.length === 0) { return } } r.val(a(t, o(r))) }) }; e.fn.incrementNumber = function (t, n) { return this.each(function (r) { var i, s, f; if (this.nodeName.toLowerCase() === "input") { i = e(this) } else { i = e(this).children("input:first"); if (i.length === 0) { return } } s = o(i); f = u(i.val(), s); if (isNaN(f)) { f = 0 } f += t ? n ? s.shiftIncrement : s.increment : n ? -s.shiftIncrement : -s.increment; i.val(a(f, s)) }) }; e.fn.setNumber.defaults = { min: null, max: null, increment: 1, shiftIncrement: 10, precision: 1, decimalPoint: ".", thousandsSep: "" }; e.fn.enableInput = function () { return this.each(function (t) { var n = e(this), r, i; if (f(n)) { n.prop("disabled", false); r = n.data("replacement"); if (r) { r.removeClass("disabled") } if (n.parent().hasClass("number")) { n.parent().removeClass("disabled") } } else { i = n.data("replaced"); if (i && f(i)) { i.prop("disabled", false); n.removeClass("disabled") } else if (n.hasClass("number")) { n.removeClass("disabled"); n.children("input").prop("disabled", false) } } }) }; e.fn.disableInput = function () { return this.each(function (t) { var n = e(this), r, i; if (f(n)) { n.prop("disabled", true); r = n.data("replacement"); if (r) { r.addClass("disabled") } if (n.parent().hasClass("number")) { n.parent().addClass("disabled") } } else { i = n.data("replaced"); if (i && f(i)) { i.prop("disabled", true); n.addClass("disabled") } else if (n.hasClass("number")) { n.addClass("disabled"); n.children("input").prop("disabled", true) } } }) }; e.template.addSetupFunction(function (t, n) { var r = this; r.findIn(t, n, "input.switch, input.checkbox, input.radio").each(function (n) { e(this).styleCheckable(); if (t && r.is(this)) { r = r.add(this) } }); r.findIn(t, n, "label.button").children(":radio, :checkbox").each(function (t) { if (this.checked) { e(this).parent().addClass("active") } }); r.findIn(t, n, ".file").filter('input[type="file"]').styleFile(); if (!Modernizr.input.placeholder) { r.findIn(t, n, 'input[placeholder][type!="password"]').each(function (t) { var n = e(this), r = n.attr("placeholder"); n.addClass("placeholder").attr("data-validation-placeholder", r); if (e.trim(n.val()) === "") { n.val(r) } }) } r.findIn(t, n, "select.select").each(function (n) { e(this).styleSelect(); if (t && r.is(this)) { r = r.add(this) } }); return r }); s.on("click", "label", function (t) { var n = e(this), r = e("#" + this.htmlFor), i; if (r.length === 0) { return } i = r.data("replacement"); if (e.template.ie7 || e.template.ie8) { if (r.is(":checkbox, :radio")) { if (i) { i.trigger("click"); return } if (n.hasClass("button") && r.closest("label").is(n)) { if (r.closest(".disabled").length > 0 || r.is(":disabled")) { return } if (r.is(":checkbox") || !r.prop("checked")) { r.prop("checked", !r.prop("checked")).trigger("change") } } return } } if (r.is("select")) { if (i && r.is(":hidden")) { i.focus() } } }); s.on("click", "span.switch, span.radio, span.checkbox", function (t) { var n = e(this), r = n.data("replaced"); if (!r || r.length === 0) { return } if (t.target === r[0]) { return } if (n.closest(".disabled").length > 0 || r.is(":disabled")) { return } if (n.data("switch-dragged")) { return } if (r.is(":checkbox") || !r.prop("checked")) { r.prop("checked", !r.prop("checked")).trigger("change") } }); s.on("mousedown touchstart", "span.switch", function (t) { function k(e) { var t = E ? e.originalEvent.touches[0] : e, n = Math.max(0, Math.min(w, p + (t.pageX - x))); C = n > w / 2 ? !o : o; if (o) { u.css("right", w - n - l + "px"); m.css("right", y - n - c + "px"); g.css("margin-left", -(w - n + h) + "px"); d.css("left", b + n - c + "px") } else { u.css("left", n - l + "px"); d.css("right", y - n - c + "px"); v.css("margin-left", -(w - n + h) + "px"); m.css("left", b + n - c + "px") } N = true } function L() { s.off(E ? "touchmove" : "mousemove", k); s.off(E ? "touchend" : "mouseup", L); r.removeClass("dragging"); if (o) { u.css("right", ""); m.css("right", ""); g.css("margin-left", ""); d.css("left", "") } else { u.css("left", ""); d.css("right", ""); v.css("margin-left", ""); m.css("left", "") } n.onselectstart = T ? T : null; if (N) { if (i.prop("checked") != C) { i.prop("checked", C).change() } r.data("switch-dragged", true); setTimeout(function () { r.removeData("switch-dragged") }, 40) } else if (E) { r.click() } } var r = e(this), i = r.data("replaced"), o = r.closest(".reversed-switches").length > 0, u = r.children(".switch-button"), a = r.hasClass("mini"), f = r.hasClass("tiny"), l = f ? 2 : 0, c = (a || f ? 7 : 4) + 2 * l, h = e.template.ie7 && !a && !f ? 4 : 0, p = u.position().left, d = r.children(".switch-on"), v = d.children(), m = r.children(".switch-off"), g = m.children(), y = r.width(), b = u.outerWidth(true), w = y - b + 2 * l, E = t.type === "touchstart", S = E ? t.originalEvent.touches[0] : t, x = S.pageX, T, N = false, C; if (!i || i.length === 0) { return } if (r.closest(".disabled").length || i.is(":disabled")) { return } t.preventDefault(); T = n.onselectstart; n.onselectstart = function () { return false }; r.addClass("dragging"); s.on(E ? "touchmove" : "mousemove", k); s.on(E ? "touchend" : "mouseup", L) }); s.on("change silent-change", ":radio, :checkbox", function (t) { var n = e(this), r = n.data("replacement"), i = this.checked; if (r) { r[i ? "addClass" : "removeClass"]("checked") } else if (n.parent().is("label.button")) { n.parent()[i ? "addClass" : "removeClass"]("active") } if (this.type === "radio") { e('input[name="' + this.name + '"]:radio').not(this).each(function (t) { var n = e(this), r = n.data("replacement"); if (r) { r[i ? "removeClass" : "addClass"]("checked") } else if (n.parent().is("label.button")) { n.parent()[i ? "removeClass" : "addClass"]("active") } }) } }); s.on("focus", "span.switch, span.radio, span.checkbox", function (t) { function o() { n.removeClass("focus"); n.removeData("checkableBlurFunction"); s.off("keydown", i); n.off("blur", o) } var n = e(this), r = n.data("replaced"), i = false; if (!r || r.length === 0) { return } if (n.closest(".disabled").length > 0 || r.is(":disabled")) { t.preventDefault(); return } if (e.template.ie7 || e.template.ie8) { } n.addClass("focus"); i = function (t) { if (t.keyCode == e.template.keys.space) { if (!r.is(":radio") || !r[0].checked) { r[0].checked = !r[0].checked; r.change() } t.preventDefault() } }; n.data("checkableBlurFunction", o); n.on("blur", o); s.on("keydown", i) }); s.on("focus", "textarea", function (t) { var n = e(this); n.addClass("focus") }).on("blur", "textarea", function () { e(this).removeClass("focus") }); s.on("focus", "input", function (t) { var n = e(this), r, i, s; if (n.closest(".disabled").length > 0 || n.is(":disabled")) { t.preventDefault(); return } if (this.type === "radio" || this.type === "checkbox") { r = n.data("replacement"); if (r) { r.addClass("focus") } return } if (!Modernizr.input.placeholder && n.attr("placeholder") && n.val() === n.attr("placeholder")) { n.removeClass("placeholder").val("") } i = n.closest(".input, .inputs"); if (i.length > 0) { i.addClass("focus"); if (i.hasClass("number")) { n.on("keydown.number", function (e) { if (e.which === 38 || e.which === 40) { n.incrementNumber(e.which === 38, e.shiftKey) } }); n.on("keyup.number", function (e) { var t = n.val(); if (t === s) { return } n.trigger("change"); s = t }) } } else { n.addClass("focus") } }).on("blur", "input", function () { var t = e(this), n, r; if (this.type === "radio" || this.type === "checkbox") { n = t.data("replacement"); if (n) { n.removeClass("focus") } return } if (!Modernizr.input.placeholder && t.attr("placeholder") && t.val() === "" && t.attr("type") != "password") { t.addClass("placeholder").val(t.attr("placeholder")) } r = t.closest(".focus"); r.removeClass("focus"); if (r.hasClass("number")) { t.off("keydown.number").off("keyup.number"); t.setNumber(t.val()) } }); if (!Modernizr.input.placeholder) { s.on("submit", "form", function (t) { e(this).find("input.placeholder").each(function () { var t = e(this); if (t.attr("placeholder") && t.val() === t.attr("placeholder")) { t.val("") } }) }) } s.on("change silent-change", '.file > input[type="file"]', function (t) { var n = e(this), r = [], i, s; if (this.multiple && this.files) { for (s = 0; s < this.files.length; s++) { r.push(this.files[s].name.split(/(\/|\\)/).pop()) } i = r.join(", ") } else { i = n.val().split(/(\/|\\)/).pop() } n.siblings(".file-text").text(i) }); s.on("click", ".number-up, .number-down", function (t) { var n = e(this), r = n.parent(), i = r.children("input:first"), s; if (i.length === 0 || i.is(":disabled")) { return } i.incrementNumber(n.hasClass("number-up"), t.shiftKey).focus().trigger("change") }); s.on("mousewheel", ".number", function (t, n, r, i) { var s = e(this).find("input"); if (!s.length || s.is(":disabled")) { return } s.incrementNumber(n > 0, t.shiftKey).focus().trigger("change"); t.preventDefault() }); s.on("focus", ".select > select", function () { var t = e(this), n = t.data("replacement"); if (n) { if (n.hasClass("select-styled-list")) { n.focus() } else { n.hasClass("focus"); t.one("blur", function () { n.removeClass("focus") }) } } }); s.on("focus select-focus", "span.select, span.selectMultiple", function (t) { function c(t, r) { var i = e(t.target), u = n.data("clone"); if (n.data("select-hiding")) { return } if ((t.type === "click" || t.type === "touchend") && (i.closest(n).length || u && i.closest(u).length)) { return } a = n.data("selectBlurTimeout"); if (!a) { n.data("selectBlurTimeout", setTimeout(function () { c.call(this, t, true) }, 40)); return } else if (r) { n.removeData("selectBlurTimeout") } else { return } n.trigger("close-select"); n.removeClass("focus"); s.off("focusin", h); s.off("keydown", o); s.off("click", c); n.off("blur", c) } function h(t) { var r = e(t.target), i = n.data("clone"); if (r.closest(n).length || i && r.closest(i).length) { n.trigger("select-focus") } else { a = n.data("selectBlurTimeout"); if (a) { clearTimeout(a) } c.call(this, t, true) } } if (t.target !== this) { return } var n = e(this).closest(".select, .selectMultiple"), r = n.data("select-settings") || {}, i = n.data("replaced"), o, u = "", a, f; if (n.hasClass("select-clone")) { return } if (i && !n.hasClass("select-styled-list")) { i.focus(); return } if (n.closest(".disabled").length > 0 || i && i.is(":disabled")) { t.preventDefault(); return } a = n.data("selectBlurTimeout"); if (a) { clearTimeout(a); n.removeData("selectBlurTimeout"); return } if (n.hasClass("focus")) { return } n.addClass("focus"); o = function (t) { var s = e.template.keys, o = n.data("clone") || n, a = o.children(".drop-down"), c, h, p, d, v, g, y; h = n.hasClass("easy-multiple-selection") ? "focus" : "selected"; switch (t.keyCode) { case s.up: if (o.hasClass("open") || n.hasClass("selectMultiple")) { p = a.children("." + h + ":first"); if (p.length === 0) { d = a.children("a, span").not(".disabled").last() } else { d = p.prevAll("a, span").not(".disabled").first() } if (d.length > 0) { p.removeClass(h); d.addClass(h); if (e.fn.scrollToReveal) { d.scrollToReveal() } if (h === "selected" && i) { v = d.data("select-value"); if (v) { if (i[0].multiple) { i.find("option:selected").prop("selected", false) } v.selected = true; i.trigger("change") } } } t.preventDefault() } else if (i) { c = m(i); if (c !== false) { while (c > 0) { if (!i[0].options[c - 1].disabled) { i[0].selectedIndex = c - 1; i.change(); break } --c } } t.preventDefault() } break; case s.down: if (n.hasClass("select") && !o.hasClass("open") && r.openOnKeyDown) { l(n); t.preventDefault() } else { if (o.hasClass("open") || n.hasClass("selectMultiple")) { p = a.children("." + h + ":last"); if (p.length === 0) { d = a.children("a, span").not(".disabled").first() } else { d = p.nextAll("a, span").not(".disabled").first() } if (d.length > 0) { p.removeClass(h); d.addClass(h); if (e.fn.scrollToReveal) { d.scrollToReveal() } if (h === "selected" && i) { v = d.data("select-value"); if (v) { if (i[0].multiple) { i.find("option:selected").prop("selected", false) } v.selected = true; i.trigger("change") } } } t.preventDefault() } else if (i) { c = m(i); if (c !== false) { while (c < i[0].options.length - 1) { if (!i[0].options[c + 1].disabled) { i[0].selectedIndex = c + 1; i.change(); break } ++c } } t.preventDefault() } } break; case s.enter: case s.space: if (h === "focus" && (n.hasClass("selectMultiple") || o.hasClass("open"))) { p = a.children("." + h); if (p.length === 1) { t.preventDefault(); p.click() } } else if (o.hasClass("open")) { o.trigger("close-select") } break; default: g = String.fromCharCode(t.keyCode); if (g && g.length === 1) { if (f) { clearTimeout(f) } u += g.toLowerCase(); y = new RegExp("^" + u, "g"); f = setTimeout(function () { u = "" }, 1500); if (o.hasClass("open") || n.hasClass("selectMultiple")) { a.children("a, span").each(function (n) { var r = e(this); if (e.trim(r.text().toLowerCase()).match(y)) { p = a.children("." + h + ":last"); p.removeClass(h); r.addClass(h); if (e.fn.scrollToReveal) { r.scrollToReveal() } if (h === "selected" && i) { v = r.data("select-value"); if (v) { i.val(v.value).trigger("change") } } t.preventDefault(); return false } }) } else if (i) { i.find("option").each(function (n) { if (e.trim(e(this).text().toLowerCase()).match(y)) { i.val(this.value).trigger("change"); t.preventDefault(); return false } }) } } break } }; n.on("blur", c); s.on("touchend click", c); s.on("keydown", o); s.on("focusin", h) }); s.on("change silent-change", "select", function () { var t = e(this), n = t.data("replacement"); if (n) { d(n, t, n.data("select-settings")) } }); if (e.template.touchOs) { s.on("touchend", ".select-arrow, span.select-value", function (t) { l(e(this).parent(), false, t) }) } else { s.on("click", ".select-arrow, span.select-value", function (t) { var n = e(this).parent(); if (!n.hasClass("select-clone") && !n.hasClass("auto-open")) { l(n, false, t) } }); s.on("mouseenter", ".select.auto-open", function (t) { var n = e(this); if (!n.hasClass("select-clone")) { l(e(this), true, t) } }) } s.on("jqv.form.validating", "form", function (t) { var n = e(this), r = n.find("span.select > select, span.selectMultiple > select").filter(":hidden").show(), i = function () { r.css("display", ""); n.off("jqv.form.result", i) }; n.on("jqv.form.result", i) }) })(jQuery, window, document)