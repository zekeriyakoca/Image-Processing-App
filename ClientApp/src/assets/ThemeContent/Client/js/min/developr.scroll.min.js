(function (e, t) { function i(e) { e.preventDefault() } function s() { var t = e(this), n = t.data("custom-scroll"); if (n) { t.data("scroll-focus", true); if (n.hscrollbar()) n.hscrollbar().animate({ opacity: 1 }); if (n.vscrollbar()) n.vscrollbar().animate({ opacity: 1 }) } } function o() { var t = e(this), n = t.data("custom-scroll"); if (n) { t.removeData("scroll-focus"); if (n.hscrollbar()) n.hscrollbar().animate({ opacity: 0 }); if (n.vscrollbar()) n.vscrollbar().animate({ opacity: 0 }) } } function u(t, n, r, i) { if (object = e(this).data("custom-scroll")) { var s = object.mousewheel(r, i); if (s.x !== 0 || s.y !== 0 || !object.settings.continuousWheelScroll) { t.preventDefault() } } } function a(t) { e(this).refreshCustomScroll() } function f(t) { var n = e(this), r = n.data("custom-scroll"), i = t.originalEvent.touches[0].pageX, s = t.originalEvent.touches[0].pageY, o, u, a; if (r && !n.data("touch-scrolling")) { o = function (e) { n.data("touch-scrolling", true); var t = e.originalEvent.touches[0].pageX, o = e.originalEvent.touches[0].pageY; a = r.move(i - t, o - s, true); if (a.x !== 0 || a.y !== 0 || !r.settings.continuousTouchScroll) { e.preventDefault() } i = t; s = o }; u = function (e) { n.off("touchmove", o); n.off("touchend touchcancel", u); n.removeData("touch-scrolling") }; n.on("touchmove", o); n.on("touchend touchcancel", u) } } var n = e(t), r = e("html").hasClass("touch"); e.fn.customScroll = function (t) { var l = e.extend({}, e.fn.customScroll.defaults, t); this.filter(".custom-scroll").refreshCustomScroll(); this.not(".custom-scroll").addClass("custom-scroll").each(function (t) { function k(e, t, n) { var r = d, i = v; if (S) { m.hide() } if (x) { y.hide() } d = Math.max(0, Math.min(d + e, u[0].scrollWidth - u.innerWidth())); v = Math.max(0, Math.min(v - t, u[0].scrollHeight - u.innerHeight())); if (c.animate && !n && C) { u.stop(true).animate({ scrollLeft: d, scrollTop: v }, { step: function () { u.refreshInnerTrackedElements() } }) } else { u.scrollLeft(d).scrollTop(v).refreshInnerTrackedElements() } if (S && e !== 0) { S() } if (x && t !== 0) { x() } return { x: d - r, y: v - i } } function L(e, t, n) { if (e !== 0) { e = e > 0 ? Math.max(e, c.minWheelScroll) : Math.min(e, -c.minWheelScroll) } if (t !== 0) { t = t > 0 ? Math.max(t, c.minWheelScroll) : Math.min(t, -c.minWheelScroll) } return k(e * c.speed, t * c.speed, n) } function A() { if (S) { m.hide() } if (x) { y.hide() } h = u[0].scrollWidth > u.innerWidth(); p = u[0].scrollHeight > u.innerHeight(); d = u.scrollLeft(); v = u.scrollTop(); if (S) { T = !h && c.autoHide; S() } if (x) { N = !p && c.autoHide; x() } } var u = e(this), a = u.css("position"), f = u.is("ul, ol") ? "li" : "div", c = e.extend({}, l, u.data("scroll-options")), h = u[0].scrollWidth > u.innerWidth(), p = u[0].scrollHeight > u.innerHeight(), d = u.scrollLeft(), v = u.scrollTop(), m, g, y, b, w = false, E = false, S = false, x = false, T = false, N = false, C = false; if (a !== "relative" && a !== "absolute" && a !== "fixed") { u.css("position", "relative") } if (typeof c.padding !== "object") { c.padding = { top: c.padding, right: c.padding, bottom: c.padding, left: c.padding } } c.padding = e.extend({ top: 0, right: 0, bottom: 0, left: 0 }, c.padding); if (c.horizontal) { w = function () { m = e("<" + f + ' class="custom-hscrollbar"></' + f + ">").appendTo(u); g = e("<div></div>").appendTo(m); m.click(function (e) { e.stopPropagation() }); g.on("selectstart", i); g.on("mousedown", function (t) { function s(t) { var n = m.width() - g.innerWidth(), s = Math.max(0, Math.min(n, i + (t.pageX - r))); m[0].style.display = "none"; d = n > 0 ? Math.round(s / n * (u[0].scrollWidth - u.innerWidth())) : 0; m[0].style.display = "block"; if (c.animate && C) { u.stop(true).animate({ scrollLeft: d }, { step: function () { e(this).refreshInnerTrackedElements() } }) } else { u.stop(true).scrollLeft(d).refreshInnerTrackedElements() } if (S) S(); if (x) x() } function o() { n.off("mousemove", s); n.off("mouseup", o) } var r = t.pageX, i = g.parseCSSValue("left"); t.preventDefault(); n.on("mousemove", s); n.on("mouseup", o) }) }; w(); S = function () { if (T) { return } if (!m[0].parentNode) { w() } var e = u.width(), t = u.innerWidth(), n = c.vertical && p && !N ? c.cornerWidth : 0, r = (c.usePadding ? e : t) - c.padding.top - c.padding.bottom - n, i = r > c.minScrollerSize * 1.5 ? c.minScrollerSize : Math.round(r / 1.5), s = r - i, o = Math.round(s * (e / u[0].scrollWidth)) + i, a = Math.round((r - o) * (d / (u[0].scrollWidth - t))); m.show(); m.stop(true)[c.animate && C ? "animate" : "css"]({ top: u.innerHeight() - (c.usePadding ? u.parseCSSValue("padding-bottom") + c.padding.top : c.padding.bottom) - c.width + v + "px", left: (c.usePadding ? u.parseCSSValue("padding-left") + c.padding.right : c.padding.left) + d + "px", width: r + "px", height: c.width + "px", opacity: u.data("scroll-focus") || !c.showOnHover ? 1 : 0 }); g.stop(true)[c.animate && C ? "animate" : "css"]({ left: a + "px", width: Math.round(o) + "px" }) } } if (c.vertical) { E = function () { y = e("<" + f + ' class="custom-vscrollbar"></' + f + ">").appendTo(u); b = e("<div></div>").appendTo(y); y.click(function (e) { e.stopPropagation() }); b.on("selectstart", i); b.on("mousedown", function (t) { function s(t) { var n = y.height() - b.innerHeight(), s = Math.max(0, Math.min(n, i + (t.pageY - r))); y[0].style.display = "none"; v = n > 0 ? Math.round(s / n * (u[0].scrollHeight - u.innerHeight())) : 0; y[0].style.display = "block"; if (c.animate && C) { u.stop(true).animate({ scrollTop: v }, { step: function () { e(this).refreshInnerTrackedElements() } }) } else { u.stop(true).scrollTop(v).refreshInnerTrackedElements() } if (S) S(); if (x) x() } function o(e) { e.preventDefault(); n.off("mousemove", s); n.off("mouseup", o) } var r = t.pageY, i = b.parseCSSValue("top"); t.preventDefault(); n.on("mousemove", s); n.on("mouseup", o) }) }; E(); x = function () { if (N) { return } if (!y[0].parentNode) { E() } var e = u.height(), t = u.innerHeight(), n = c.horizontal && h && !T ? c.cornerWidth : 0, r = (c.usePadding ? e : t) - c.padding.top - c.padding.bottom - n, i = r > c.minScrollerSize * 1.5 ? c.minScrollerSize : Math.round(r / 1.5), s = r - i, o = s * (e / u[0].scrollHeight) + i, a = Math.round((r - o) * (v / (u[0].scrollHeight - t))); y.show(); y.stop(true)[c.animate && C ? "animate" : "css"]({ top: (c.usePadding ? u.parseCSSValue("padding-top") + c.padding.top : c.padding.top) + v + "px", left: u.innerWidth() - (c.usePadding ? u.parseCSSValue("padding-right") + c.padding.right : c.padding.right) - c.width + d + "px", height: r + "px", width: c.width + "px", opacity: u.data("scroll-focus") || !c.showOnHover ? 1 : 0 }); b.stop(true)[c.animate && C ? "animate" : "css"]({ top: a + "px", height: Math.round(o) + "px" }) } } u.data("custom-scroll", { settings: c, hscrollbar: function () { return m }, hscroller: function () { return g }, vscrollbar: function () { return y }, vscroller: function () { return b }, refresh: A, refreshH: S, refreshV: x, move: k, mousewheel: L }); A(); if (c.showOnHover) { if (m) m.css({ opacity: 0 }); if (y) y.css({ opacity: 0 }); if (r) { u.on("touchstart", s).on("touchend", o) } else { u.on("mouseenter", s).on("mouseleave", o) } } C = true }).on("mousewheel", u).on("scroll sizechange scrollsizechange", a).on("touchstart", f); return this }; e.fn.removeCustomScroll = function () { this.filter(".custom-scroll").off("mousewheel", u).off("scroll sizechange scrollsizechange", a).off("touchstart", f).off("touchstart", s).off("touchend", o).off("mouseenter", s).off("mouseleave", o).removeData("scroll-options").removeData("touch-scrolling").removeClass("custom-scroll").children(".custom-hscrollbar, .custom-vscrollbar").remove().scrollLeft(0).scrollTop(0); return this }; e.fn.hasCustomScroll = function () { return this.data("custom-scroll") ? true : false }; e.fn.refreshCustomScroll = function () { this.each(function (t) { var n = e(this).data("custom-scroll"); if (n) { n.refresh() } }); return this }; e.fn.moveCustomScroll = function (t, n, r) { this.each(function (i) { var s = e(this).data("custom-scroll"); if (s) { s.move(t, n, r) } }); return this }; e.fn.scrollToReveal = function () { this.each(function (t) { var n = e(this), r = n.parents(".custom-scroll"); r.each(function (t) { var r = e(this), i, s, o, u, a, f, l, c, h, p = 0, d = 0; u = r.data("custom-scroll"); if (!u) { return } o = r[0]; s = n.offset(); i = r.offset(); s.top -= i.top + r.parseCSSValue("border-top-width"); s.left -= i.left + r.parseCSSValue("border-left-width"); a = n.outerWidth(); f = n.outerHeight(); h = { top: u.settings.usePadding ? r.parseCSSValue("padding-top") : 0, right: u.settings.usePadding ? r.parseCSSValue("padding-right") : 0, bottom: u.settings.usePadding ? r.parseCSSValue("padding-bottom") : 0, left: u.settings.usePadding ? r.parseCSSValue("padding-left") : 0 }; l = r.innerWidth(); c = r.innerHeight(); if (s.left < h.left) { p = h.left - s.left } else if (s.left + a > l - h.right) { p = l - h.right - s.left - a } if (s.top < h.top) { d = h.top - s.top } else if (s.top + f > c - h.bottom) { d = c - h.bottom - s.top - f } if (p !== 0 || d !== 0) { u.move(p, d) } }) }); return this }; e.fn.customScroll.defaults = { horizontal: false, vertical: true, usePadding: false, padding: 6, width: 8, cornerWidth: 10, minScrollerSize: 30, minWheelScroll: .25, continuousWheelScroll: true, continuousTouchScroll: true, speed: 48, animate: false, showOnHover: true, autoHide: true }; e.template.addSetupFunction(function (e, t) { this.findIn(e, t, ".scrollable").customScroll(); return this }) })(jQuery, document)